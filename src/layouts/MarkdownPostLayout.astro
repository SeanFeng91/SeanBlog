---
import Rightsideber from '../components/Rightsideber.astro';
import BaseLayout from './BaseLayout.astro';
const { frontmatter } = Astro.props;
---

<style>
  a {
    color: #00539F;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
  }

  .tag {
    margin: 0.25em;
    border: dotted 1px #a1a1a1;
    border-radius: .5em;
    padding: .5em 1em;
    font-size: 1.15em;
    background-color: #F8FCFD;
  }

  .container {
    padding: 3rem 0;
    max-width: 1152px;
  }

  .meta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }

  /* And more... */
</style>

<BaseLayout pageTitle={frontmatter.title}>
  <div class="overflow-y-auto flex-1 justify-center items-center">
    <p class="text-center text-4xl text-pretty">{frontmatter.title}</p>
    <p class="text-center p-0"><em>{frontmatter.description}</em></p>
    <!-- <p>{frontmatter.pubDate.toString().slice(0,10)}</p> -->
    <p class="text-center">作者: {frontmatter.author}    第一次发表：{frontmatter.pubDate.toString().slice(0,10)}</p>
<!-- 
  <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />

  <div class="tags">``````````````````
    {frontmatter.tags.map((tag) => (
      <p class="tag"><a href={`/SeanBlog/tags/${tag}`}>{tag}</a></p>
    ))}
  </div> -->
  </div>
    <!-- <main> -->

    
    <section slot="Rightbar">
      <Rightsideber />
    </section>
  <!-- </main> -->
    
  <slot />
 
  
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded event fired');

    const tocLinks = document.querySelectorAll('#toc a'); // 根据实际情况调整选择器

  //  const tocLinks = document.querySelectorAll('.toc-link');
      const sections = document.querySelectorAll('div section');
      console.log('Table of Contents Links:', tocLinks);
      console.log('Sections:', sections);

      const observerOptions = {
        root: null,
        rootMargin: '0px 0px -80% 0px', // 触发的偏移量，可以根据需要调整
        threshold: 0.1 // 触发时目标元素可见的比例，可以根据需要调整
      };

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          console.log('IntersectionObserver entry:', entry);
          
          if (entry.isIntersecting) {
            tocLinks.forEach(link => {
              const isActive = link.getAttribute('href').substring(1) === entry.target.id;
              console.log(`Setting highlight for ${link.getAttribute('href')} to ${isActive}`);
              link.classList.toggle('highlight', isActive);
            });
          }
        });
      }, observerOptions);

      sections.forEach(section => {
        observer.observe(section);
        console.log(`Observing section: ${section.id}`);
      });
    });
</script>

