---
import Rightsideber from '../components/Rightsideber.astro';
import BaseLayout from './BaseLayout.astro';
// import '../scripts/scrollmd.js';
const { frontmatter } = Astro.props;
// 此页面作为对md文档的基础样式
---

<style>
  a {
    color: #00539F;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
  }

  .tag {
    margin: 0.25em;
    border: dotted 1px #a1a1a1;
    border-radius: .5em;
    padding: .5em 1em;
    font-size: 1.15em;
    background-color: #F8FCFD;
  }

  .container {
    padding: 3rem 0;
    max-width: 1152px;
  }

  .meta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }
  .mdhighlight{
    background-color: rgb(253 186 116);
    border: 1;
    border-radius: 0.5rem;
    padding-left: 1px;
    padding-right: 1px;
  }
  /* And more... */
</style>

<BaseLayout pageTitle={frontmatter.title}>
  <div class="overflow-y-auto flex-1 justify-center items-center">
    <p class="text-center font-bold text-5xl text-pretty">{frontmatter.title}</p>
    <p class="text-center p-0"><em>{frontmatter.description}</em></p>
    <!-- <p>{frontmatter.pubDate.toString().slice(0,10)}</p> -->
    <p class="text-center">作者: {frontmatter.author}    第一次发表：{frontmatter.pubDate.toString().slice(0,10)}</p>

  </div>
    
    <section slot="Rightbar">
      <Rightsideber />
    </section>
    <div class="nav-links">
    <slot />

  </div>
    
   
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
// 实现右侧导航栏跟随文章标题联动高亮
  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
  const rightsidebar = document.getElementById('rightsidebar');
  const rightbarLinks = rightsidebar.querySelectorAll('.rightbar-link');
  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -60% 0px', // 提前90%的视口高度开始检测
    threshold: 0.1, // 10%的部分进入视口即触发
  };
  
  // 获取链接的路径并去掉末尾的斜杠
  function getLinkPath(link) {
      // let linkPath = new URL(link.getAttribute('href'), window.location.origin).pathname;
      let linkPath = link.getAttribute('href')
      return linkPath;
      // return linkPath.endsWith('/') ? linkPath.slice(0, -1) : linkPath;
    }
  const observerCallback = (entries) => {
    let activeId = null;

    entries.forEach((entry) => {
      // 选择ul和所有目录项

      if (entry.isIntersecting) {
        activeId = entry.target.getAttribute('id');
      }
      const id = entry.target.getAttribute('id');
      // console.log(`Scrolling id ${id}`);  // 调试信息
          
      const navItem = document.querySelector('a[href="#{id}"]');
      // console.log(`rightbarLinks id ${rightbarLinks}`);  // 调试信息
      if(activeId){
          rightbarLinks.forEach(link => {

          const linkPath = getLinkPath(link);
          if (entry.isIntersecting && linkPath ===`#${id}`) {
            link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
        })
      }    
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  // 观察所有的标题
  document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading) => {
    observer.observe(heading);
  });
  // 初始页面加载时设置第一个标题的active状态-未实现

});


    // 尝试看能不能把rightsidebar的跳转附加到正文内-可以的
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();

      const targetId = this.getAttribute('href').substring(1); // 去掉#
      const targetElement = document.getElementById(targetId);
      if (!targetElement) {
        console.error(`Element with ID ${targetId} not found`);
        return;
      }
      const header = document.getElementById('fixed-header');
      const headerHeight = 200;
      const elementPosition = targetElement.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.scrollY - headerHeight;

      console.log(`Scrolling to ${targetId}`);  // 调试信息
      console.log(`Target element:`, targetElement);  // 调试信息

      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth'
      });
    });
  });

  
</script>
<!-- 尝试页面内更换字体效果 没有成功，重新加载那一下有问题-->
<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
      const effectSelector = document.getElementById('effect-selector');
      const textElement = document.getElementById('text-element');

      effectSelector.addEventListener('change', function () {
          const selectedEffect = effectSelector.value;
          textElement.setAttribute('data-in-effect', selectedEffect);
          // Re-initialize Textillate.js to apply the new effect
          $(textElement).textillate('in');
      });

      // Initialize Textillate.js
      $(textElement).textillate();
  });
</script>

<!-- 字体动画 -->
<script type="module" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="module" src="https://cdnjs.cloudflare.com/ajax/libs/lettering.js/0.7.0/jquery.lettering.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css" integrity="sha512-YTL2qFiv2wZNnC764l1DD5zN6lYxDzJ89Ss6zj6YoYIzr6+zwjdVKM1sUR+971X3h7qWCa9cPUBXyYqhOqWWLQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script type="module" src="https://cdn.rawgit.com/jschr/textillate/master/jquery.textillate.js"></script>
    <script type="module">
        $(document).ready(function () {
            $('.tlt').textillate({
            // the default selector to use when detecting multiple texts to animate
            selector: '.texts',
            // enable looping
            loop: true,

            // sets the minimum display time for each text before it is replaced
            minDisplayTime: 1000,

            // sets the initial delay before starting the animation
            // (note that depending on the in effect you may need to manually apply
            // visibility: hidden to the element before running this plugin)
            initialDelay: 0,

            // set whether or not to automatically start animating
            autoStart: true,

            // custom set of 'in' effects. This effects whether or not the
            // character is shown/hidden before or after an animation
            inEffects: [''],

            // custom set of 'out' effects
            outEffects: [ 'hinge' ],

            // in animation settings
            in: {
    
            },

            // out animation settings.
            out: {
              // effect: 'bounceOut',
              // delayScale: 1.5,
              // delay: 50,
              // sync: false,
              // shuffle: true,
              // reverse: false,
              // callback: function () {}
            },

            // callback that executes once textillate has finished
            callback: function () {},

            // set the type of token to animate (available types: 'char' and 'word')
            type: 'char'
          });
        });
        
    </script>