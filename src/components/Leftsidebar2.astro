---
const allPosts = await Astro.glob('../pages/**/*.md');
import BlogPost from '../components/BlogPost.astro';
// 将文件按目录分组
const posts = allPosts.filter(file => file.url.includes('/posts/'));
const blogs = allPosts.filter(file => file.url.includes('/blogs/'));

---

<div>
  
  <div id="hs-overlay-backdrop-with-scrolling" class="hs-overlay hs-overlay-open:translate-x-0 hidden -translate-x-full fixed top-0 start-0 transition-all duration-300 transform h-full max-w-xs w-full z-[50] bg-white border-e dark:bg-neutral-800 dark:border-neutral-700 [--body-scroll:true]" tabindex="-1">
    <div class="flex justify-between items-center py-3 px-4 border-b dark:border-neutral-700">
      <h3 class="font-bold text-gray-800 dark:text-white">
        博客目录
      </h3>
      <button type="button" class="flex justify-center items-center size-7 text-sm font-semibold rounded-full border border-spacing-1 text-gray-800 hover:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-neutral-700" data-hs-overlay="#hs-overlay-backdrop-with-scrolling">
        <span class="sr-only">Close</span>
        <svg class="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M18 6 6 18"></path>
          <path d="m6 6 12 12"></path>
        </svg>
      </button>
    </div>
    <!-- 目录主体部分 -->
      <div class="p-4">
        <nav class="text-sm capitalize">
          <ul class="space-y-5 leading-loose">
            <li>
              <h4 class="mt-14 mb-2 lg:mb-3 font-semibold text-slate-900 dark:text-slate-400">记录类blogs1</h4>
              <ul id="leftpostlist" class="space-y-6 lg:space-y-2 border-l border-slate-100 dark:border-slate-800">
                {posts.map((post) =><BlogPost url={post.url} title={post.frontmatter.title}/>)}
              </ul>
            </li>
            <li>
              <h4 class="mt-14 mb-2 lg:mb-3 font-semibold text-slate-900 dark:text-slate-400">大模型相关blogs1</h4>
              <ul id="leftbloglist" class="space-y-6 lg:space-y-2 border-l border-slate-100 dark:border-slate-800">
                {blogs.map((blog) =><BlogPost url={blog.url} title={blog.frontmatter.title}/>)}
              </ul>
            </li>
          </ul>
        </nav>
      </div>
    </div> 
 </div>





 
<style>
    .leftsidebar {
      position: fixed;
    }
    
</style>

<script src="../../node_modules/preline/dist/preline.js"></script>
<script>
// 确认JavaScript代码是否被加载和执行
console.log('JavaScript代码已加载和执行');

// 选择ul和所有目录项
const menu = document.getElementById('leftbloglist');
const menuLinks = menu.querySelectorAll('.menu-link');

// 获取当前页面的路径并去掉末尾的斜杠
function getCurrentPagePath() {
      let pathname = window.location.pathname;
      return pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
    }

    // 获取链接的路径并去掉末尾的斜杠
    function getLinkPath(link) {
      let linkPath = new URL(link.getAttribute('href'), window.location.origin).pathname;
      return linkPath.endsWith('/') ? linkPath.slice(0, -1) : linkPath;
    }

    // 页面加载时检查当前 URL，设置激活状态
    window.addEventListener('DOMContentLoaded', () => {
      // console.log('DOMContentLoaded事件触发');
      const currentPagePath = getCurrentPagePath();
      // console.log('Current Page Path:', currentPagePath);

      menuLinks.forEach(link => {
        const linkPath = getLinkPath(link);
        // console````.log('Link Path:', linkPath);

        if (currentPagePath === linkPath) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    });

    // 为每个链接添加点击事件
    menuLinks.forEach((link) => {
      link.addEventListener('click', function(event) {
        // 防止链接的默认行为
        event.preventDefault();

        // 模拟导航到链接的目标
        window.location.href = this.getAttribute('href');
      });
    });


</script>
