---
const allPosts = await Astro.glob('../pages/posts/*.md');
import BlogPost from '../components/BlogPost.astro';
import Headingsofblog from "../components/Headingsofblog.astro";
// import { getHeadings } from 'astro:content';
import Blog001 from '../pages/posts/Blog001.md';
// const {headings} =Astro.props;
// const headings = await getHeadings();
---

<div class=" leftsidebar flex items-center justify-between py-2.5 lg:hidden"><a id="toggleDocMenu" class="flex items-center gap-2 text-xs"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentcolor" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12H12m-8.25 5.25h16.5"></path></svg>Menu</a>
    <a href="#" class="text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentcolor" class="h-4 w-4"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 10.5 12 3m0 0 7.5 7.5M12 3v18"></path></svg></a></div>
    <div class="-ml-2 hidden lg:m-0 lg:block lg:pb-5 lg:pr-4" id="docMenu">
        <!-- <div id="docsearch"><button type="button" class="DocSearch DocSearch-Button" aria-label="Search"><span class="DocSearch-Button-Container"><svg width="20" height="20" class="DocSearch-Search-Icon" viewBox="0 0 20 20" aria-hidden="true"><path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg><span class="DocSearch-Button-Placeholder">Search</span></span><span class="DocSearch-Button-Keys"><kbd class="DocSearch-Button-Key"><svg width="15" height="15" class="DocSearch-Control-Key-Icon"><path d="M4.505 4.496h2M5.505 5.496v5M8.216 4.496l.055 5.993M10 7.5c.333.333.5.667.5 1v2M12.326 4.5v5.996M8.384 4.496c1.674 0 2.116 0 2.116 1.5s-.442 1.5-2.116 1.5M3.205 9.303c-.09.448-.277 1.21-1.241 1.203C1 10.5.5 9.513.5 8V7c0-1.57.5-2.5 1.464-2.494.964.006 1.134.598 1.24 1.342M12.553 10.5h1.953" stroke-width="1.2" stroke="currentColor" fill="none" stroke-linecap="square"></path></svg></kbd><kbd class="DocSearch-Button-Key">K</kbd></span></button></div> -->
    <nav class="text-sm capitalize">
        <ul class="space-y-5 leading-loose">
            <li>
                <h4 class="mt-14 mb-2 lg:mb-3 font-semibold text-slate-900 dark:text-slate-400">自动从posts读取的blog的title</h4>
                <ul id="leftbloglist" class="space-y-6 lg:space-y-2 border-l border-slate-100 dark:border-slate-800">
                    {allPosts.map((post) =><BlogPost url={post.url} title={post.frontmatter.title}/>)}
                </ul>
            </li>
            <li>
                <!-- <h4 class="px-1 pb-2 font-medium text-secondary-900">试一下heading</h5> -->
                <ul>
                    <!-- {allPosts.map((heading) =><Headingsofblog url={`#${heading.getHeadings}`} headings={heading.getHeadings.depth ===1}em/>)} -->
                    <!-- <p>#{allPosts.headings}</p> -->
                </ul>
                      
            </li>

        </ul>
    </nav>

</div>

<style>
    .leftsidebar {
      position: fixed;
    }
    
</style>

<script>
// 选择ul和所有目录项
const menu = document.getElementById('leftbloglist');
    const menuLinks = menu.querySelectorAll('.menu-link');

    // 获取当前页面的路径
    function getCurrentPagePath() {
      return window.location.pathname;
    }

    // 页面加载时检查当前 URL，设置激活状态
    window.addEventListener('DOMContentLoaded', () => {
      const currentPagePath = getCurrentPagePath();
      console.log('Current Page Path:', currentPagePath);

      menuLinks.forEach(link => {
        const linkPath = link.getAttribute('href');
        console.log('Link Path:', linkPath);

        if (currentPagePath.endsWith(linkPath)) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    });

    // 为每个链接添加点击事件
    menuLinks.forEach((link) => {
      link.addEventListener('click', function(event) {
        // 防止链接的默认行为
        event.preventDefault();

        // 模拟导航到链接的目标
        window.location.href = this.getAttribute('href');
      });
    });


// // 为每个链接添加点击事件
// menuLinks.forEach((link, index) => {
//   link.addEventListener('click', function(event) {
//     // 防止链接的默认行为
//     event.preventDefault();
    
//     // 移除所有链接的激活状态
//     menuLinks.forEach(i => i.classList.remove('active'));
    
//     // 为当前点击的链接添加激活状态
//     this.classList.add('active');
    
//     // 将当前激活的链接索引存储到本地存储
//     localStorage.setItem('activeMenuLinkIndex', index);
    
//     // 模拟导航到链接的目标
//     window.location.href = this.getAttribute('href');
//   });
// });

// // 页面加载时检查本地存储，设置激活状态
// window.addEventListener('DOMContentLoaded', () => {
//   const activeIndex = localStorage.getItem('activeMenuLinkIndex');
//   if (activeIndex !== null) {
//     const activeLink = menuLinks[activeIndex];
//     if (activeLink) {
//       activeLink.classList.add('active');
//     }
//   }
// });

</script>