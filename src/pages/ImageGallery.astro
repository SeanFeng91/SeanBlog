---
import IndexLayout from '../layouts/IndexLayout.astro';
import fs from 'fs/promises';
import path from 'path';

let errorMessage = '';
let albums = [];

const BASE_URL = import.meta.env.BASE_URL || '/SeanBlog';
console.log(`Base URL: ${BASE_URL}`);

async function getImagesFromDirectory(dir) {
  console.log(`扫描目录: ${dir}`);
  const files = await fs.readdir(dir);
  console.log(`找到文件: ${files.join(', ')}`);
  
  // 读取 exif_records.json 文件
  const exifRecordsPath = path.join(dir, 'exif_records.json');
  let exifRecords;
  try {
    const exifData = await fs.readFile(exifRecordsPath, 'utf-8');
    exifRecords = JSON.parse(exifData);
    console.log('成功读取 exif_records.json');
  } catch (error) {
    console.error('读取 exif_records.json 失败:', error);
    exifRecords = {};
  }
  
  const mediaFiles = files.filter(file => ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.mp4', '.mov', '.webm'].includes(path.extname(file).toLowerCase()));
  console.log(`找到媒体文件: ${mediaFiles.join(', ')}`);

  const mediaPromises = mediaFiles.map(async (file, index) => {
    const filePath = path.join(dir, file);
    console.log(`处理文件: ${filePath}`);
    try {
      let mediaSrc = `${BASE_URL}/${path.relative('public', filePath).replace(/\\/g, '/')}`;
      let thumbnailSrc = mediaSrc.replace('/Albums/', '/thumbnails/');
      
      const isVideo = ['.mp4', '.mov', '.webm'].includes(path.extname(file).toLowerCase());
      
      if (isVideo) {
        thumbnailSrc = thumbnailSrc.replace(/\.[^.]+$/, '_thumb.jpg');
      } else {
        thumbnailSrc = thumbnailSrc.replace(/(\.[^.]+)$/, '_thumb.webp');
      }
      
      const exifData = exifRecords[file] || {};
      
      console.log(`Media src: ${mediaSrc}`);
      console.log(`Thumbnail src: ${thumbnailSrc}`);
      
      return {
        id: index + 1,
        src: mediaSrc,
        thumbnailSrc: thumbnailSrc,
        alt: path.parse(file).name,
        title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim(),
        exifData: exifData,
        isVideo: isVideo
      };
    } catch (error) {
      console.error(`处理文件 ${filePath} 时出错:`, error);
      return null;
    }
  });

  const mediaItems = await Promise.all(mediaPromises);
  const validMediaItems = mediaItems.filter(item => item !== null);
  console.log(`处理后的有效媒体项目数量: ${validMediaItems.length}`);
  return validMediaItems;
}

// 在 getImagesFromDirectory 函数之后添加：
async function getAlbumDescription(albumPath) {
  try {
    const descriptionPath = path.join(albumPath, 'description.txt');
    const description = await fs.readFile(descriptionPath, 'utf-8');
    return description.trim();
  } catch (error) {
    console.error(`读取相册描述失败: ${error}`);
    return ''; // 如果没有描述文件或读取失败，返回空字符串
  }
}

try {
  const baseDir = 'public/pictures/Albums';
  console.log(`Base directory: ${baseDir}`);

  const albumDirs = await fs.readdir(baseDir);
  const albumPromises = albumDirs
    .filter(async (file) => (await fs.stat(path.join(baseDir, file))).isDirectory())
    .map(async (albumName) => {
      console.log(`处理相册: ${albumName}`);
      const albumPath = path.join(baseDir, albumName);
      const images = await getImagesFromDirectory(albumPath);
      const description = await getAlbumDescription(albumPath);
      console.log(`在 ${albumName} 中找到 ${images.length} 张图片`);
      return {
        id: albumName.toLowerCase(),
        name: albumName.replace(/([A-Z])/g, ' $1').trim(),
        path: albumPath,
        images: images,
        description: description
      };
    });

  albums = await Promise.all(albumPromises);
  console.log(`Total albums: ${albums.length}`);
} catch (error) {
  console.error('Error occurred:', error);
  errorMessage = `Error: ${error.message}`;
}

const defaultActiveAlbum = albums.length > 0 ? albums[0].id : null;

---

<IndexLayout title="ImageGallery">
  <div slot="maindiv" class="album-gallery" >
    <h1 style="text-align: center;">我的相册集</h1>
    
    {errorMessage && <p style="color: red;">{errorMessage}</p>}
    
    {albums.length === 0 && <p>没有找到相册或处理相册时出错。</p>}
    
    {albums.length > 0 && (
      <div>
        <div class="album-tabs">
          {albums.map((album) => (
            <button class="album-tab" data-album={album.id}>{album.name}</button>
          ))}
        </div>
        {albums.map((album, index) => (
          <div class="album" id={album.id} style={index === 0 ? "" : "display: none;"}>
            <h2>{album.name}</h2>
            <p class="album-description">{album.description}</p>
            <div class="image-grid">
              {album.images.length > 0 ? (
                album.images.map((media) => (
                  <div class="image-item" key={media.id}>
                    <div class="image-container">
                      {media.isVideo ? (
                        <video
                          src={media.src}
                          poster={media.thumbnailSrc}
                          preload="metadata"
                          loop
                          muted
                          playsinline
                          class="gallery-image"
                          data-media-id={media.id}
                          data-full-src={media.src}
                        ></video>
                      ) : (
                        <img
                          src={media.thumbnailSrc}
                          alt={media.alt}
                          loading="lazy"
                          data-media-id={media.id}
                          data-full-src={media.src}
                          class="gallery-image"
                        />
                      )}
                    </div>
                    <div class="image-overlay">
                      <div class="image-title">{media.title}</div>
                      <div class="image-metadata">
                        <p>拍摄时间: {media.exifData.DateTime || '未知'}</p>
                        <p>相机: {media.exifData.Make || '未知'} {media.exifData.Model || ''}</p>
                        {media.exifData.GPSInfo && (
                          <p class="gps-info" data-gps={media.exifData.GPSInfo}>位置: 加载中...</p>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <p>这个相册中没有媒体文件。</p>
              )}
            </div>
          </div>
        ))}
      </div>
    )}

    <div id="modal" class="modal">
      <span class="close">&times;</span>
      <button class="nav-button prev">&lsaquo;</button>
      <img class="modal-content" id="modal-image" />
      <button class="nav-button next">&rsaquo;</button>
    </div>
  </div>
</IndexLayout>

<style>
  .album-gallery {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }
  .album-tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
  }
  .album-tab {
    padding: 10px 20px;
    margin: 0 5px;
    border: none;
    background-color: #f0f0f0;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  .album-tab:hover, .album-tab.active {
    background-color: #ddd;
  }
  .album {
    margin-bottom: 30px;
  }
  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
    padding: 0;
    margin: 0;
  }
  .image-item {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
    background-color: #ffffff;
  }
  .image-container {
    position: relative;
    width: 100%;
    padding-top: 75%; /* 4:3 宽高比 */
    overflow: hidden;
  }
  .image-item img.gallery-image,
  .image-item video.gallery-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    margin: 0;
  }
  .image-item:hover img.gallery-image,
  .image-item:hover video.gallery-image {
    transform: scale(1.05);
  }
  .image-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(0,0,0,0.7);
    color: white;
    padding: 8px;
    transform: translateY(100%);
    transition: transform 0.3s ease-in-out;
  }
  .image-item:hover .image-overlay {
    transform: translateY(0);
  }
  .image-title {
    font-weight: bold;
    font-size: 0.9em;
    margin-bottom: 3px;
  }
  .image-metadata {
    font-size: 0.8em;
  }
  .image-metadata p {
    margin: 0;
    line-height: 1.2;
  }
  .modal {
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.9);
    overflow: hidden;
  }
  .modal-content {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
    display: block;
    margin: 32px auto;
  }
  .close {
    position: absolute;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1001;
  }
  .nav-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(255,255,255,0.2);
    color: white;
    border: none;
    font-size: 36px;
    padding: 20px 15px;
    cursor: pointer;
    transition: background-color 0.3s;
    border-radius: 5px;
  }
  .nav-button:hover {
    background-color: rgba(255,255,255,0.4);
  }
  .prev {
    left: 20px;
  }
  .next {
    right: 20px;
  }

  .prose :where(img.gallery-image):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
  }

  .image-item img.gallery-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    margin: 0;
  }

  .album-description {
    margin-bottom: 20px;
    font-style: italic;
    color: #666;
    line-height: 1.5;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
</style>

<script is:inline>
  console.log('客户端脚本已加载');

  const modal = document.getElementById('modal');
  const modalImg = document.getElementById('modal-image');
  const closeBtn = document.getElementsByClassName('close')[0];
  const prevBtn = document.querySelector('.nav-button.prev');
  const nextBtn = document.querySelector('.nav-button.next');
  const imageElements = document.querySelectorAll('.image-item img');
  let currentImageIndex = 0;

  function showImage(index) {
    currentImageIndex = index;
    modalImg.src = imageElements[index].getAttribute('data-full-src');
  }

  imageElements.forEach((img, index) => {
    img.onclick = function() {
      modal.style.display = "block";
      showImage(index);
      document.body.style.overflow = 'hidden';
    }
  });

  closeBtn.onclick = function() {
    modal.style.display = "none";
    document.body.style.overflow = 'auto';
  }

  prevBtn.onclick = function() {
    currentImageIndex = (currentImageIndex - 1 + imageElements.length) % imageElements.length;
    showImage(currentImageIndex);
  }

  nextBtn.onclick = function() {
    currentImageIndex = (currentImageIndex + 1) % imageElements.length;
    showImage(currentImageIndex);
  }

  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
      document.body.style.overflow = 'auto';
    }
  }

  document.addEventListener('keydown', function(event) {
    if (modal.style.display === 'block') {
      if (event.key === 'Escape') {
        modal.style.display = "none";
        document.body.style.overflow = 'auto';
      } else if (event.key === 'ArrowLeft') {
        prevBtn.click();
      } else if (event.key === 'ArrowRight') {
        nextBtn.click();
      }
    }
  });

  // 确保模态框初始状态为隐藏
  modal.style.display = "none"; 
  
  // 修改相册标签页切换逻辑
  const albumTabs = document.querySelectorAll('.album-tab');
  const albums = document.querySelectorAll('.album');

  function switchToAlbum(albumId) {
    // 隐藏所有相册
    albums.forEach(album => {
      album.style.display = 'none';
    });

    // 显示选中的相册
    const selectedAlbum = document.getElementById(albumId);
    if (selectedAlbum) {
      selectedAlbum.style.display = 'block';
    }

    // 更新标签页样式
    albumTabs.forEach(t => t.classList.remove('active'));
    const activeTab = document.querySelector(`.album-tab[data-album="${albumId}"]`);
    if (activeTab) {
      activeTab.classList.add('active');
    }

    // 更新 URL hash，但不触发滚动
    history.pushState(null, '', `#${albumId}`);
  }

  albumTabs.forEach(tab => {
    tab.addEventListener('click', (event) => {
      event.preventDefault(); // 阻止默认的锚点行为
      const albumId = tab.getAttribute('data-album');
      switchToAlbum(albumId);
    });
  });

  // 页面加载时检查 URL hash 并切换到相应的相册
  document.addEventListener('DOMContentLoaded', function() {
    let albumId = window.location.hash.slice(1); // 移除开头的 #
    if (!albumId || !document.getElementById(albumId)) {
      // 如果没有有效的 hash 或相应的相册不存在，默认选择第一个相册
      albumId = albumTabs.length > 0 ? albumTabs[0].getAttribute('data-album') : null;
    }
    if (albumId) {
      switchToAlbum(albumId);
    }
  });

  // 监听 hashchange 事件，以便在使用浏览器的前进/后退按钮时正确切换相册
  window.addEventListener('hashchange', function() {
    let albumId = window.location.hash.slice(1);
    if (albumId && document.getElementById(albumId)) {
      switchToAlbum(albumId);
    }
  });

  function formatGPS(gpsInfo) {
    try {
      const gps = JSON.parse(gpsInfo.replace(/'/g, '"'));
      return `${gps[1]} ${gps[2][0]}°${gps[2][1]}'${gps[2][2]}" ${gps[3]} ${gps[4][0]}°${gps[4][1]}'${gps[4][2]}"`;
    } catch (error) {
      console.error('GPS 信息格式化失败:', error);
      return '未知';
    }
  }

  // 在页面加载完成后格式化 GPS 信息
  document.addEventListener('DOMContentLoaded', function() {
    const gpsElements = document.querySelectorAll('.gps-info');
    gpsElements.forEach(element => {
      const gpsInfo = element.getAttribute('data-gps');
      if (gpsInfo) {
        element.textContent = '位置: ' + formatGPS(gpsInfo);
      }
    });
  });

  // 修改视频悬停播放功能
  const videoElements = document.querySelectorAll('.image-item video');
  videoElements.forEach(video => {
    const container = video.closest('.image-item');
    container.addEventListener('mouseenter', () => {
      video.play().catch(e => console.error('视频播放失败:', e));
    });
    container.addEventListener('mouseleave', () => {
      video.pause();
      video.currentTime = 0;
    });
    
    // 确保视频加载后显示第一帧
    video.addEventListener('loadeddata', () => {
      video.currentTime = 0;
    });
  });

  // 修改模态框以支持视频
  const mediaElements = document.querySelectorAll('.image-item .gallery-image');
  
  function showMedia(index) {
    currentImageIndex = index;
    const media = mediaElements[index];
    if (media.tagName === 'VIDEO') {
      modalImg.style.display = 'none';
      let modalVideo = document.getElementById('modal-video');
      if (!modalVideo) {
        modalVideo = document.createElement('video');
        modalVideo.controls = true;
        modalVideo.autoplay = true;
        modalVideo.loop = true;
        modalVideo.className = 'modal-content';
        modalVideo.id = 'modal-video';
        modal.insertBefore(modalVideo, modalImg);
      }
      modalVideo.src = media.src;
      modalVideo.style.display = 'block';
    } else {
      const modalVideo = document.getElementById('modal-video');
      if (modalVideo) {
        modalVideo.style.display = 'none';
      }
      modalImg.style.display = 'block';
      modalImg.src = media.getAttribute('data-full-src');
    }
  }

  mediaElements.forEach((media, index) => {
    media.onclick = function() {
      modal.style.display = "flex";
      showMedia(index);
      document.body.style.overflow = 'hidden';
    }
  });

  // 更新 prevBtn 和 nextBtn 的点击事件处理程序
  prevBtn.onclick = function() {
    currentImageIndex = (currentImageIndex - 1 + mediaElements.length) % mediaElements.length;
    showMedia(currentImageIndex);
  }

  nextBtn.onclick = function() {
    currentImageIndex = (currentImageIndex + 1) % mediaElements.length;
    showMedia(currentImageIndex);
  }

</script>
