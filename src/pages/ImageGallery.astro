---
import IndexLayout from '../layouts/IndexLayout.astro';
import fs from 'fs/promises';
import path from 'path';
import ExifReader from 'exifreader';
import sharp from 'sharp';
import heicConvert from 'heic-convert';

let errorMessage = '';
let albums = [];

const BASE_URL = import.meta.env.BASE_URL || '/SeanBlog';
console.log(`Base URL: ${BASE_URL}`);

async function convertHeicToJpeg(buffer) {
  try {
    const jpegBuffer = await heicConvert({
      buffer: buffer,
      format: 'JPEG',
      quality: 90
    });
    return jpegBuffer;
  } catch (error) {
    console.error('HEIC 转换错误:', error);
    throw error;
  }
}

async function getImagesFromDirectory(dir) {
  console.log(`扫描目录: ${dir}`);
  const files = await fs.readdir(dir);
  console.log(`找到文件: ${files.join(', ')}`);
  
  const imagePromises = files
    .filter(file => ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.heic'].includes(path.extname(file).toLowerCase()))
    .map(async (file, index) => {
      const filePath = path.join(dir, file);
      console.log(`处理文件: ${filePath}`);
      try {
        let buffer = await fs.readFile(filePath);
        let metadata;
        let imageSrc = `${BASE_URL}${path.join(dir, file).replace('public', '').replace(/\\/g, '/')}`;
        
        if (path.extname(file).toLowerCase() === '.heic') {
          buffer = await convertHeicToJpeg(buffer);
          imageSrc = imageSrc.replace('.heic', '.jpg');
        }
        
        if (['.webp', '.heic'].includes(path.extname(file).toLowerCase())) {
          const image = sharp(buffer);
          metadata = await image.metadata();
        } else {
          metadata = ExifReader.load(buffer);
        }
        
        console.log(`图片 src: ${imageSrc}`);
        
        return {
          id: index + 1,
          src: imageSrc,
          alt: path.parse(file).name,
          title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim(),
          metadata: {
            dateTime: metadata.DateTime ? metadata.DateTime.description : (metadata.exif ? metadata.exif.DateTimeOriginal : 'Unknown'),
            make: metadata.Make ? metadata.Make.description : (metadata.exif ? metadata.exif.Make : 'Unknown'),
            model: metadata.Model ? metadata.Model.description : (metadata.exif ? metadata.exif.Model : 'Unknown'),
          }
        };
      } catch (error) {
        console.error(`处理文件 ${filePath} 时出错:`, error);
        return null;
      }
    });

  const images = await Promise.all(imagePromises);
  return images.filter(image => image !== null);
}

try {
  const baseDir = 'public/pictures/Albums';
  console.log(`Base directory: ${baseDir}`);

  const albumsPromise = Promise.all(
    (await fs.readdir(baseDir))
      .filter(async file => (await fs.stat(path.join(baseDir, file))).isDirectory())
      .map(async (albumName) => {
        console.log(`处理相册: ${albumName}`);
        const albumPath = path.join(baseDir, albumName);
        const images = await getImagesFromDirectory(albumPath);
        console.log(`在 ${albumName} 中找到 ${images.length} 张图片`);
        return {
          id: albumName.toLowerCase(),
          name: albumName.replace(/([A-Z])/g, ' $1').trim(),
          path: albumPath,
          images: images
        };
      })
  );

  albums = await albumsPromise;
  console.log(`总共相册数: ${albums.length}`);
} catch (error) {
  console.error('发生错误:', error);
  errorMessage = `错误: ${error.message}`;
}
---

<IndexLayout title="ImageGallery">
  <div slot="maindiv" class="album-gallery">
    <h1>我的相册集</h1>
    
    {errorMessage && <p style="color: red;">{errorMessage}</p>}
    
    {albums.length === 0 && <p>没有找到相册或处理相册时出错。</p>}
    
    {albums.length > 0 && (
      <div>
        <p>找到 {albums.length} 个相册</p>
        {albums.map((album) => (
          <div class="album" id={album.id}>
            <h2>{album.name}</h2>
            <div class="image-grid">
              {album.images.length > 0 ? (
                album.images.map((image) => (
                  <div class="image-item" key={image.id}>
                    <img src={image.src} alt={image.alt} loading="lazy" />
                    <div class="image-overlay">
                      <div class="image-title">{image.title}</div>
                      <div class="image-metadata">
                        <p>日期: {image.metadata.dateTime}</p>
                        <p>相机: {image.metadata.make} {image.metadata.model}</p>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <p>这个相册中没有图片。</p>
              )}
            </div>
          </div>
        ))}
      </div>
    )}
  </div>
</IndexLayout>

<style>
  .album-gallery {
    padding: 20px;
  }
  .album {
    margin-bottom: 30px;
  }
  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
  }
  .image-item {
    position: relative;
    overflow: hidden;
  }
  .image-item img {
    width: 100%;
    height: auto;
    display: block;
  }
  .image-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(0,0,0,0.7);
    color: white;
    padding: 10px;
    transform: translateY(100%);
    transition: transform 0.3s ease-in-out;
  }
  .image-item:hover .image-overlay {
    transform: translateY(0);
  }
  .image-title {
    font-weight: bold;
    margin-bottom: 5px;
  }
  .image-metadata {
    font-size: 0.8em;
  }
</style>

<script>
  console.log('客户端脚本已加载');
  // 其余的客户端脚本
</script>
