---
import IndexLayout from '../layouts/IndexLayout.astro';
import fs from 'fs/promises';
import path from 'path';
import ExifReader from 'exifreader';
import sharp from 'sharp';

const BASE_URL = import.meta.env.BASE_URL || '/SeanBlog';
console.log(`Base URL: ${BASE_URL}`);

async function convertHeicToWebp(buffer) {
  try {
    const webpBuffer = await sharp(buffer)
      .webp({ quality: 80 })
      .toBuffer();
    return webpBuffer;
  } catch (error) {
    console.error('HEIC 转换错误:', error);
    throw error;
  }
}

async function getImagesFromDirectory(dir) {
  console.log(`扫描目录: ${dir}`);
  const files = await fs.readdir(dir);
  console.log(`找到文件: ${files.join(', ')}`);
  
  const imagePromises = files
    .filter(file => ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.heic'].includes(path.extname(file).toLowerCase()))
    .map(async (file, index) => {
      const filePath = path.join(dir, file);
      console.log(`处理文件: ${filePath}`);
      try {
        let buffer = await fs.readFile(filePath);
        let metadata;
        let imageSrc = `${BASE_URL}${path.join(dir, file).replace('public', '').replace(/\\/g, '/')}`;
        
        if (path.extname(file).toLowerCase() === '.heic') {
          buffer = await convertHeicToWebp(buffer);
          imageSrc = imageSrc.replace('.heic', '.webp');
        }
        
        if (['.webp', '.heic'].includes(path.extname(file).toLowerCase())) {
          const image = sharp(buffer);
          metadata = await image.metadata();
        } else {
          metadata = ExifReader.load(buffer);
        }
        
        console.log(`图片 src: ${imageSrc}`);
        
        return {
          id: index + 1,
          src: imageSrc,
          alt: path.parse(file).name,
          title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim(),
          metadata: {
            dateTime: metadata.DateTime ? metadata.DateTime.description : (metadata.exif ? metadata.exif.DateTimeOriginal : 'Unknown'),
            make: metadata.Make ? metadata.Make.description : (metadata.exif ? metadata.exif.Make : 'Unknown'),
            model: metadata.Model ? metadata.Model.description : (metadata.exif ? metadata.exif.Model : 'Unknown'),
          }
        };
      } catch (error) {
        console.error(`处理文件 ${filePath} 时出错:`, error);
        return null;
      }
    });

  const images = await Promise.all(imagePromises);
  return images.filter(image => image !== null);
}

async function getAlbums() {
  const baseDir = 'public/pictures/Albums';
  console.log(`Base directory: ${baseDir}`);

  const albumDirs = await fs.readdir(baseDir);
  const albumPromises = albumDirs
    .filter(async (file) => (await fs.stat(path.join(baseDir, file))).isDirectory())
    .map(async (albumName) => {
      console.log(`处理相册: ${albumName}`);
      const albumPath = path.join(baseDir, albumName);
      const images = await getImagesFromDirectory(albumPath);
      console.log(`在 ${albumName} 中找到 ${images.length} 张图片`);
      return {
        id: albumName.toLowerCase(),
        name: albumName.replace(/([A-Z])/g, ' $1').trim(),
        path: albumPath,
        images: images
      };
    });

  return await Promise.all(albumPromises);
}

const albums = await getAlbums();
console.log(`总共相册数: ${albums.length}`);
---

<IndexLayout title="ImageGallery">
  <div slot="maindiv" class="album-gallery">
    <h1>我的相册集</h1>
    
    {albums.length === 0 && <p>没有找到相册或处理相册时出错。</p>}
    
    {albums.length > 0 && (
      <div>
        <p>找到 {albums.length} 个相册</p>
        <div class="album-tabs">
          {albums.map((album) => (
            <button class="album-tab" data-album={album.id}>{album.name}</button>
          ))}
        </div>
        {albums.map((album) => (
          <div class="album" id={album.id}>
            <h2>{album.name}</h2>
            <div class="image-grid">
              {album.images.length > 0 ? (
                album.images.map((image) => (
                  <div class="image-item" key={image.id}>
                    <div class="image-container">
                      <img src={image.src} alt={image.alt} loading="lazy" data-image-id={image.id} />
                    </div>
                    <div class="image-overlay">
                      <div class="image-title">{image.title}</div>
                      <div class="image-metadata">
                        <p>{image.metadata.dateTime}</p>
                        <p>{image.metadata.make} {image.metadata.model}</p>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <p>这个相册中没有图片。</p>
              )}
            </div>
          </div>
        ))}
      </div>
    )}

    <div id="modal" class="modal">
      <span class="close">&times;</span>
      <img class="modal-content" id="modal-image" />
    </div>
  </div>
</IndexLayout>

<style>
  /* 保持现有样式不变 */
</style>

<script>
  console.log('客户端脚本已加载');

  // 相册切换功能
  const albumTabs = document.querySelectorAll('.album-tab');
  const albums = document.querySelectorAll('.album');

  albumTabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const albumId = tab.getAttribute('data-album');
      
      albumTabs.forEach(t => t.classList.remove('active'));
      albums.forEach(a => a.classList.remove('active'));

      tab.classList.add('active');
      document.getElementById(albumId).classList.add('active');
    });
  });

  // 默认显示第一个相册
  albumTabs[0].click();

  // 图片预览功能
  const modal = document.getElementById('modal');
  const modalImg = document.getElementById('modal-image');
  const closeBtn = document.getElementsByClassName('close')[0];
  const imageElements = document.querySelectorAll('.image-item img');

  imageElements.forEach(img => {
    img.onclick = function() {
      modal.style.display = "block";
      modalImg.src = this.src;
      document.body.style.overflow = 'hidden';
    }
  });

  closeBtn.onclick = function() {
    modal.style.display = "none";
    document.body.style.overflow = 'auto';
  }

  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
      document.body.style.overflow = 'auto';
    }
  }

  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && modal.style.display === 'block') {
      modal.style.display = "none";
      document.body.style.overflow = 'auto';
    }
  });
</script>
