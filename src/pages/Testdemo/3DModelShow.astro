---
import "../../styles/global.css";
import IndexLayout from "../../layouts/IndexLayout.astro";
import fs from 'fs/promises';
import path from 'path';

// 声明变量（只声明一次）
let models = [];
let errorMessage = '';

// 添加调试函数
function debug(message, ...args) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${message}`, ...args);
}

const pageTitle = "GLB 模型展示";

// 确保 BASE_URL 正确设置
const BASE_URL = (import.meta.env.BASE_URL || '/SeanBlog/').replace(/\/$/, '');
debug('Base URL configured as:', BASE_URL);

async function getModelsFromDirectory() {
    debug('开始读取模型目录');
    try {
        const baseDir = 'public/models';
        const files = await fs.readdir(baseDir);
        debug('找到的文件:', files);
        
        const modelFiles = files.filter(file => ['.glb'].includes(path.extname(file).toLowerCase()));
        debug('筛选后的模型文件:', modelFiles);
        
        return modelFiles.map((file, index) => {
            const modelSrc = `${BASE_URL}/models/${file}`;
            debug('处理模型:', { file, modelSrc });
            
            return {
                id: index + 1,
                src: modelSrc,
                title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim()
            };
        });
    } catch (error) {
        debug('读取模型目录失败:', error);
        errorMessage = `读取模型目录失败: ${error.message}`;
        return [];
    }
}

try {
    // 直接赋值给已声明的 models 变量
    models = await getModelsFromDirectory();
    debug('模型加载完成，总数:', models.length);
    debug('模型列表:', models);
} catch (error) {
    debug('发生错误:', error);
    errorMessage = `Error: ${error.message}`;
}
---

<IndexLayout pageTitle={pageTitle}>
  <div slot="maindiv" class="mx-auto px-4 py-8">
    <h1>3D 模型展示</h1>
    <!-- 添加调试开关 -->
    <!-- <button id="toggleDebug" style="position: fixed; bottom: 10px; right: 10px; z-index: 1000;">
        Toggle Debug
    </button> -->
    
    <p>欢迎来到我们的 3D 模型展示页面。在这里，您可以浏览和互动各种精美的 3D 模型。点击任何模型卡片以在查看器中打开并探索。</p>
    <p>使用了Tripo 3D的AI模型生成功能，根据图片生成了3D模型。使用Three.js导入glb格式模型进行展示</p>
    
    <!-- 原来的卡片 -->
    <div class="gallery-container" id="galleryContainer">
        <div class="models-grid">
            {models.map((model) => (
                <div class="model-card" data-model-url={model.src}>
                    <div class="model-preview"></div>
                    <h3>{model.title}</h3>
                </div>
            ))}
        </div>
    </div>

    <div id="modelViewer" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="canvas-container"></div>
        </div>
    </div>
   
    <!-- 全屏查看容器 -->
    <!-- <div id="fullscreen-container" class="fixed inset-0 bg-black bg-opacity-90 hidden z-50">
      <div class="relative w-full h-full">
        <div id="fullscreen-model-container" class="w-full h-full"></div>
        <button 
          onclick="window.closeFullscreen()"
          class="absolute top-4 right-4 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full p-2 transition-colors"
        >
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div> -->
</div>
</IndexLayout>

<!-- Three.js 相关库 -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.160.0/three.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>


<!-- 初始化模型查看器的脚本 -->
<script is:inline>
 console.log('客户端脚本已加载2');
        // 调试工具函数
        function debugLog(message, ...args) {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] ${message}`, ...args);
            
            // 同时更新调试信息面板
            const debugContent = document.getElementById('debugContent');
            if (debugContent) {
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${timestamp}] ${message} ${args.map(arg => JSON.stringify(arg)).join(' ')}`;
                debugContent.appendChild(logEntry);
                debugContent.scrollTop = debugContent.scrollHeight;
            }
        }

        // 错误处理函数
        function handleError(error, context) {
            debugLog(`Error in ${context}:`, error);
            console.error(error);
        }

        // 导入 Three.js
        // import * as THREE from 'three';
        // import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
        // import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

        

        debugLog('Three.js 版本:', THREE.REVISION);

        let currentScene, currentCamera, currentRenderer, currentControls;

        // 在 script 标签内添加预览渲染器的管理
        let previewRenderers = new Map();

        // 修改 initViewer 函数，添加清理场景的功能
        function initViewer(containerElement) {
            debugLog('初始化查看器');
            try {
                // 清理现有场景
                if (currentRenderer) {
                    currentRenderer.dispose();
                    currentRenderer.domElement.remove();
                }
                if (currentControls) {
                    currentControls.dispose();
                }
                if (currentScene) {
                    // 清理场景中的所有对象
                    while(currentScene.children.length > 0) { 
                        const object = currentScene.children[0];
                        currentScene.remove(object);
                    }
                }
                
                // 创建新场景
                currentScene = new THREE.Scene();
                currentScene.background = new THREE.Color(0xf0f0f0);
                debugLog('场景创建成功');

                // 创建相机
                currentCamera = new THREE.PerspectiveCamera(
                    75,
                    containerElement.clientWidth / containerElement.clientHeight,
                    0.1,
                    1000
                );
                currentCamera.position.set(5, 5, 5);
                debugLog('相机设置完成');

                // 创建渲染器时添加额外的设置
                const renderer = new THREE.WebGLRenderer({ 
                    antialias: true,
                    alpha: true,
                    powerPreference: "high-performance",
                    preserveDrawingBuffer: true
                });
                renderer.setSize(containerElement.clientWidth, containerElement.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                
                // 设置正确的颜色空间和编码
                renderer.outputColorSpace = THREE.SRGBColorSpace;  // 替代已废弃的 .outputEncoding
                renderer.toneMapping = THREE.ACESFilmicToneMapping;
                renderer.toneMappingExposure = 1.0;
                
                containerElement.appendChild(renderer.domElement);
                debugLog('渲染器创建成功');

                // 添加光源
                const ambientLight = new THREE.AmbientLight(0xffffff, 1);
                currentScene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 5, 5);
                currentScene.add(directionalLight);
                debugLog('光源添加完成');

                // 添加控制器
                currentControls = new OrbitControls(currentCamera, currentRenderer.domElement);
                currentControls.enableDamping = true;
                debugLog('控制器设置完成');

                // 动画循环
                function animate() {
                    requestAnimationFrame(animate);
                    currentControls.update();
                    currentRenderer.render(currentScene, currentCamera);
                }
                animate();
                debugLog('动画循环启动');

            } catch (error) {
                handleError(error, 'initViewer');
            }
        }

        function setupLights(scene) {
            // 清除现有的灯光
            scene.children = scene.children.filter(child => !(child instanceof THREE.Light));
            
            // 添加环境光
            const ambientLight = new THREE.AmbientLight(0xffffff, 1);
            scene.add(ambientLight);
            
            // 添加方向光
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);
            
            debugLog('光源添加完成');
        }

        // 修改预览初始化函数
        function initPreview(previewElement, modelUrl) {
            debugLog('初始化预览:', modelUrl);
            
            const width = previewElement.clientWidth;
            const height = previewElement.clientHeight;
            
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf0f0f0);
            
            // 使用相同的光照设置
            setupLights(scene);
            
            const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
            camera.position.set(0, 0, 5);
            
            const renderer = new THREE.WebGLRenderer({ 
                antialias: true,
                alpha: true,
                powerPreference: "high-performance"
            });
            renderer.setSize(width, height);
            renderer.outputColorSpace = THREE.SRGBColorSpace;
            previewElement.appendChild(renderer.domElement);
            
            const loader = new THREE.GLTFLoader();
            loader.load(
                modelUrl,
                (gltf) => {
                    debugLog('预览模型加载成功:', modelUrl);
                    const model = gltf.scene;
                    scene.add(model);
                    
                    // 自动调整模型位置和大小
                    const box = new THREE.Box3().setFromObject(model);
                    const size = box.getSize(new THREE.Vector3());
                    const center = box.getCenter(new THREE.Vector3());
                    
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const fov = camera.fov * (Math.PI / 180);
                    let cameraZ = Math.abs(maxDim / Math.tan(fov / 2)) * 1.5;
                    
                    camera.position.set(0, 0, cameraZ);
                    camera.lookAt(center);
                    
                    // 添加自动旋转动画
                    function animate() {
                        requestAnimationFrame(animate);
                        model.rotation.y += 0.01;
                        renderer.render(scene, camera);
                    }
                    animate();
                },
                (xhr) => {
                    const percent = (xhr.loaded / xhr.total * 100).toFixed(2);
                    debugLog(`预览加载进度 ${modelUrl}: ${percent}%`);
                },
                (error) => {
                    debugLog('预览模型加载失败:', error);
                }
            );
        }

        // 修改加载模型函数
        function loadModel(url) {
            debugLog('开始加载模型:', url);
            try {
                const loader = new GLTFLoader();
                
                // 添加 KTX2 和 DDS 纹理加载器支持
                const ktx2Loader = new KTX2Loader();
                ktx2Loader.setTranscoderPath('path/to/basis/');
                ktx2Loader.detectSupport(renderer);
                loader.setKTX2Loader(ktx2Loader);
                
                loader.load(
                    url,
                    (gltf) => {
                        debugLog('模型加载成功');
                        const model = gltf.scene;
                        
                        // 处理材质和纹理
                        model.traverse((child) => {
                            if (child.isMesh) {
                                // 更新材质设置
                                if (child.material) {
                                    child.material.needsUpdate = true;
                                    
                                    // 如果有纹理，确保正确的颜色空间
                                    if (child.material.map) {
                                        child.material.map.colorSpace = THREE.SRGBColorSpace;
                                    }
                                    
                                    // 设置合适的材质参数
                                    child.material.roughness = 0.7;
                                    child.material.metalness = 0.3;
                                }
                            }
                        });
                        
                        // 清理现有场景
                        while(currentScene.children.length > 0) { 
                            currentScene.remove(currentScene.children[0]);
                        }

                        // 添加模型到场景
                        currentScene.add(model);

                        // 自动调整相机视角
                        const box = new THREE.Box3().setFromObject(model);
                        const center = box.getCenter(new THREE.Vector3());
                        const size = box.getSize(new THREE.Vector3());
                        
                        debugLog('模型尺寸:', size);
                        debugLog('模型中心点:', center);

                        const maxDim = Math.max(size.x, size.y, size.z);
                        const fov = currentCamera.fov * (Math.PI / 180);
                        let cameraZ = Math.abs(maxDim / Math.tan(fov / 2)) * 2;

                        currentCamera.position.set(center.x, center.y + (size.y / 2), center.z + cameraZ);
                        currentCamera.lookAt(center);
                        currentControls.target.copy(center);

                        // 添加环境光和方向光
                        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                        directionalLight.position.set(5, 5, 5);
                        currentScene.add(ambientLight);
                        currentScene.add(directionalLight);

                        debugLog('场景设置完成');
                        
                        // 强制渲染一帧
                        currentRenderer.render(currentScene, currentCamera);
                    },
                    (xhr) => {
                        const percent = (xhr.loaded / xhr.total * 100).toFixed(2);
                        debugLog(`加载进度: ${percent}%`);
                    },
                    (error) => {
                        debugLog('模型加载错误:', error);
                        handleError(error, 'loadModel');
                    }
                );
            } catch (error) {
                debugLog('loadModel 发生错误:', error);
                handleError(error, 'loadModel');
            }
        }

        // 页面加载完成后的初始化
        document.addEventListener('DOMContentLoaded', () => {
            debugLog('DOM加载完成');
            
            try {
                const galleryContainer = document.getElementById('galleryContainer');
                const modelViewer = document.getElementById('modelViewer');
                const closeBtn = document.querySelector('.close');
                const canvasContainer = document.getElementById('canvas-container');
                const toggleDebugBtn = document.getElementById('toggleDebug');
                const debugInfo = document.getElementById('debugInfo');

                debugLog('DOM元素获取状态:', {
                    hasGallery: !!galleryContainer,
                    hasViewer: !!modelViewer,
                    hasCloseBtn: !!closeBtn,
                    hasCanvas: !!canvasContainer
                });

                // 调试开关功能
                if (toggleDebugBtn && debugInfo) {
                    toggleDebugBtn.addEventListener('click', () => {
                        debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
                    });
                }

                // 初始化所有预览
                const modelCards = document.querySelectorAll('.model-card');
                modelCards.forEach(card => {
                    const previewElement = card.querySelector('.model-preview');
                    const modelUrl = card.dataset.modelUrl;
                    if (previewElement && modelUrl) {
                        initPreview(previewElement, modelUrl);
                    }
                });

                // 修改模型卡片点击事件
                if (galleryContainer) {
                    galleryContainer.addEventListener('click', (event) => {
                        const modelCard = event.target.closest('.model-card');
                        if (modelCard) {
                            const modelUrl = modelCard.dataset.modelUrl;
                            debugLog('模型卡片被点击，URL:', modelUrl);
                            
                            modelViewer.style.display = 'block';
                            initViewer(canvasContainer); // 每次都重新化
                            loadModel(modelUrl);
                        }
                    });
                }

                // 关闭按钮事件
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        debugLog('关闭按钮被点击');
                        modelViewer.style.display = 'none';
                    });
                }

                // 窗口大小变化处理
                window.addEventListener('resize', () => {
                    debugLog('窗口大小发生变化');
                    if (currentCamera && currentRenderer) {
                        currentCamera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;
                        currentCamera.updateProjectionMatrix();
                        currentRenderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);
                    }
                });

                // 添加清理函数
                window.addEventListener('beforeunload', () => {
                    previewRenderers.forEach(({ renderer }) => {
                        renderer.dispose();
                    });
                });

                debugLog('事件监听器设置完成');
            } catch (error) {
                handleError(error, 'DOMContentLoaded');
            }
        });

        // 在面加载完成后，等待一小段时间确保所有库都加载完成
        setTimeout(() => {
            if (typeof THREE === 'undefined') {
                console.error('Three.js not loaded');
                return;
            }
            if (typeof THREE.GLTFLoader === 'undefined') {
                console.error('GLTFLoader not loaded');
                return;
            }
            
            debugLog('Three.js 和 GLTFLoader 已加载');
            
            // 初始化所有预览
            const modelContainers = document.querySelectorAll('.model-container');
            modelContainers.forEach(container => {
                const modelUrl = container.dataset.modelSrc;
                if (modelUrl) {
                    initPreview(container, modelUrl);
                }
            });
        }, 1000); // 等待1秒确保所有库都加载完成

        // 修改全屏显示函数
        window.showFullscreen = function(modelUrl) {
            debugLog('显示全屏模型:', modelUrl);
            const container = document.getElementById('fullscreen-container');
            const modelContainer = document.getElementById('fullscreen-model-container');
            
            if (!container || !modelContainer) {
                debugLog('未找到全屏容器元素');
                return;
            }
            
            container.classList.remove('hidden');
            
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0x000000);
            
            // 使用相同的光照设置
            setupLights(scene);
            
            // 创建相机
            const camera = new THREE.PerspectiveCamera(
                75,
                modelContainer.clientWidth / modelContainer.clientHeight,
                0.1,
                1000
            );
            camera.position.set(0, 0, 5);
            
            // 创建渲染器
            const renderer = new THREE.WebGLRenderer({ 
                antialias: true,
                alpha: true,
                physicallyCorrectLights: true
            });
            renderer.setSize(modelContainer.clientWidth, modelContainer.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.outputEncoding = THREE.sRGBEncoding;
            renderer.toneMapping = THREE.ACESFilmicToneMapping;
            renderer.toneMappingExposure = 1.0;
            modelContainer.appendChild(renderer.domElement);
            
            // 添加轨道控制器
            const controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            
            // 添加灯光
            const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
            scene.add(ambientLight);
            
            const directionalLight1 = new THREE.DirectionalLight(0xffffff, 1.0);
            directionalLight1.position.set(1, 1, 1);
            scene.add(directionalLight1);
            
            const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight2.position.set(-1, -1, -1);
            scene.add(directionalLight2);
            
            // 加载模型
            const loader = new THREE.GLTFLoader();
            loader.load(
                modelUrl,
                (gltf) => {
                    const model = gltf.scene;
                    
                    // 确保模型材质正确显示
                    model.traverse((child) => {
                        if (child.isMesh) {
                            child.material.needsUpdate = true;
                            if (child.material.color.getHex() === 0x000000) {
                                child.material = new THREE.MeshStandardMaterial({
                                    color: 0xcccccc,
                                    metalness: 0.5,
                                    roughness: 0.5
                                });
                            }
                        }
                    });
                    
                    scene.add(model);
                    
                    // 自动调整相机位置
                    const box = new THREE.Box3().setFromObject(model);
                    const size = box.getSize(new THREE.Vector3());
                    const center = box.getCenter(new THREE.Vector3());
                    
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const fov = camera.fov * (Math.PI / 180);
                    let cameraZ = Math.abs(maxDim / Math.tan(fov / 2)) * 2;
                    
                    camera.position.set(center.x, center.y, center.z + cameraZ);
                    camera.lookAt(center);
                    controls.target.copy(center);
                    
                    // 更新控制器
                    controls.update();
                },
                (xhr) => {
                    const percent = (xhr.loaded / xhr.total * 100).toFixed(2);
                    debugLog(`全屏模型加载进度: ${percent}%`);
                },
                (error) => {
                    debugLog('全屏模型加载失败:', error);
                }
            );
            
            // 动画循环
            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
            
            // 处理窗口大小变化
            function handleResize() {
                const width = modelContainer.clientWidth;
                const height = modelContainer.clientHeight;
                
                camera.aspect = width / height;
                camera.updateProjectionMatrix();
                
                renderer.setSize(width, height);
            }
            
            window.addEventListener('resize', handleResize);
        }

        // 修改关闭全屏函数
        window.closeFullscreen = function() {
            debugLog('关闭全屏显示');
            const container = document.getElementById('fullscreen-container');
            const modelContainer = document.getElementById('fullscreen-model-container');
            
            if (container) {
                container.classList.add('hidden');
            }
            
            // 清理容器
            if (modelContainer) {
                while (modelContainer.firstChild) {
                    modelContainer.removeChild(modelContainer.firstChild);
                }
            }
        }
</script>
<style>
    /* 保持原有样式不变 */
    .gallery-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    .models-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
        padding: 1rem;
    }
    
    .model-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
    }
    
    .model-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
    }
    
    .model-preview {
        height: 280px;
        width: 100%;
        background: #f5f5f5;
        position: relative;
        overflow: hidden;
    }
    
    .model-card h3 {
        padding: 1rem;
        margin: 0;
        font-size: 1.2rem;
        text-align: center;
        color: #333;
    }
    
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
    }
    
    .modal-content {
        width: 90%;
        height: 90%;
        margin: 2% auto;
        background: white;
        position: relative;
    }
    
    #canvas-container {
        width: 100%;
        height: 100%;
    }
    
    .close {
        position: absolute;
        right: 20px;
        top: 10px;
        font-size: 30px;
        cursor: pointer;
        color: white;
        z-index: 1001;
    }
    
    .model-container {
        width: 100%;
        height: 100%;
        min-height: 300px; /* 确保容器有最小高度 */
    }

    #canvas-container {
        width: 100%;
        height: 100%;
        min-height: 400px; /* 确保3D容器有足够的显示空间 */
    }

    #fullscreen-container {
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.9);
        z-index: 50;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #fullscreen-container.hidden {
        display: none;
    }

    #fullscreen-model-container {
        width: 90%;
        height: 90%;
        position: relative;
    }

    #fullscreen-model-container canvas {
        width: 100% !important;
        height: 100% !important;
    }

    .close-button {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50%;
        width: 2.5rem;
        height: 2.5rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
    }

    .close-button:hover {
        background: rgba(255, 255, 255, 0.3);
    }
</style>









