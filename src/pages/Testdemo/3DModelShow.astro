---
import "../../styles/global.css";
import IndexLayout from "../../layouts/IndexLayout.astro";
import fs from 'fs/promises';
import path from 'path';

// 声明变量（只声明一次）
let models = [];
let errorMessage = '';

// 添加调试函数
function debug(message, ...args) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${message}`, ...args);
}

const pageTitle = "GLB 模型展示";

// 确保 BASE_URL 正确设置
const BASE_URL = (import.meta.env.BASE_URL || '/SeanBlog/').replace(/\/$/, '');
debug('Base URL configured as:', BASE_URL);

async function getModelsFromDirectory() {
    debug('开始读取模型目录');
    try {
        const baseDir = 'public/models';
        const files = await fs.readdir(baseDir);
        debug('找到的文件:', files);
        
        const modelFiles = files.filter(file => ['.glb'].includes(path.extname(file).toLowerCase()));
        debug('筛选后的模型文件:', modelFiles);
        
        return modelFiles.map((file, index) => {
            const modelSrc = `${BASE_URL}/models/${file}`;
            debug('处理模型:', { file, modelSrc });
            
            return {
                id: index + 1,
                src: modelSrc,
                title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim()
            };
        });
    } catch (error) {
        debug('读取模型目录失败:', error);
        errorMessage = `读取模型目录失败: ${error.message}`;
        return [];
    }
}

try {
    // 直接赋值给已声明的 models 变量
    models = await getModelsFromDirectory();
    debug('模型加载完成，总数:', models.length);
    debug('模型列表:', models);
} catch (error) {
    debug('发生错误:', error);
    errorMessage = `Error: ${error.message}`;
}
---

<IndexLayout pageTitle={pageTitle}>
  <div slot="maindiv" class="mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">GLB 模型展示</h1>
    
    <!-- 添加调试信息 -->
    <div class="mb-4">
      <p>模型总数: {models.length}</p>
      <pre class="bg-gray-100 p-2 rounded">
        {JSON.stringify(models, null, 2)}
      </pre>
    </div>
    
    {errorMessage && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        {errorMessage}
      </div>
    )}
    <!-- 原来的卡片 -->
    <div class="gallery-container" id="galleryContainer">
        <div class="models-grid">
            {models.map((model) => (
                <div class="model-card" data-model-url={model.src}>
                    <div class="model-preview"></div>
                    <h3>{model.title}</h3>
                </div>
            ))}
        </div>
    </div>

    <div id="modelViewer" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="canvas-container"></div>
        </div>
    </div>
    {models.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="models-container">
        {models.map((model) => (
          <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="h-64 w-full relative model-container" data-model-src={model.src}>
              <!-- canvas 将被动态创建 -->
            </div>
            <div class="p-4">
              <h2 class="text-xl font-semibold">{model.title}</h2>
              <button 
                class="mt-2 w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
                onclick={`window.showFullscreen('${model.src}')`}
              >
                放大查看
              </button>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center py-8">
        <p class="text-gray-500">暂无模型数据</p>
      </div>
    )}

    <!-- 全屏查看容器 -->
    <div id="fullscreen-container" class="fixed inset-0 bg-black bg-opacity-90 hidden z-50">
      <div class="relative w-full h-full">
        <div id="fullscreen-model-container" class="w-full h-full"></div>
        <button 
          onclick="window.closeFullscreen()"
          class="absolute top-4 right-4 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full p-2 transition-colors"
        >
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
</div>
</IndexLayout>

<!-- Three.js 相关库 -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.160.0/three.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/loaders/GLTFLoader.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/controls/OrbitControls.js"></script>

<!-- 初始化模型查看器的脚本 -->
<script >
 console.log('客户端脚本已加载2');
        // 调试工具函数
        function debugLog(message, ...args) {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] ${message}`, ...args);
            
            // 同时更新调试信息面板
            const debugContent = document.getElementById('debugContent');
            if (debugContent) {
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${timestamp}] ${message} ${args.map(arg => JSON.stringify(arg)).join(' ')}`;
                debugContent.appendChild(logEntry);
                debugContent.scrollTop = debugContent.scrollHeight;
            }
        }

        // 错误处理函数
        function handleError(error, context) {
            debugLog(`Error in ${context}:`, error);
            console.error(error);
        }

        // 导入 Three.js
        import * as THREE from 'three';
        import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

        

        debugLog('Three.js 版本:', THREE.REVISION);

        let currentScene, currentCamera, currentRenderer, currentControls;

        // 在 script 标签内添加预览渲染器的管理
        let previewRenderers = new Map();

        // 修改 initViewer 函数，添加清理场景的功能
        function initViewer(containerElement) {
            debugLog('初始化查看器');
            try {
                // 清理现有场景
                if (currentRenderer) {
                    currentRenderer.dispose();
                    currentRenderer.domElement.remove();
                }
                if (currentControls) {
                    currentControls.dispose();
                }
                if (currentScene) {
                    // 清理场景中的所有对象
                    while(currentScene.children.length > 0) { 
                        const object = currentScene.children[0];
                        currentScene.remove(object);
                    }
                }
                
                // 创建新场景
                currentScene = new THREE.Scene();
                currentScene.background = new THREE.Color(0xf0f0f0);
                debugLog('场景创建成功');

                // 创建相机
                currentCamera = new THREE.PerspectiveCamera(
                    75,
                    containerElement.clientWidth / containerElement.clientHeight,
                    0.1,
                    1000
                );
                currentCamera.position.set(5, 5, 5);
                debugLog('相机设置完成');

                // 创建渲染器
                currentRenderer = new THREE.WebGLRenderer({ antialias: true });
                currentRenderer.setSize(containerElement.clientWidth, containerElement.clientHeight);
                containerElement.appendChild(currentRenderer.domElement);
                debugLog('渲染器创建成功');

                // 添加光源
                const ambientLight = new THREE.AmbientLight(0xffffff, 1);
                currentScene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 5, 5);
                currentScene.add(directionalLight);
                debugLog('光源添加完成');

                // 添加控制器
                currentControls = new OrbitControls(currentCamera, currentRenderer.domElement);
                currentControls.enableDamping = true;
                debugLog('控制器设置完成');

                // 动画循环
                function animate() {
                    requestAnimationFrame(animate);
                    currentControls.update();
                    currentRenderer.render(currentScene, currentCamera);
                }
                animate();
                debugLog('动画循环启动');

            } catch (error) {
                handleError(error, 'initViewer');
            }
        }

        // 修改预览初始化函数
        function initPreview(previewElement, modelUrl) {
            const width = previewElement.clientWidth;
            const height = previewElement.clientHeight;
            
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0xffffff); // 设置白色背景
            
            const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ antialias: true });
            
            renderer.setSize(width, height);
            previewElement.appendChild(renderer.domElement);
            
            const ambientLight = new THREE.AmbientLight(0xffffff, 1);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);
            
            const loader = new GLTFLoader();
            loader.load(modelUrl, (gltf) => {
                const model = gltf.scene;
                scene.add(model);
                
                // 自动调整模型大小和位置
                const box = new THREE.Box3().setFromObject(model);
                const size = box.getSize(new THREE.Vector3());
                const center = box.getCenter(new THREE.Vector3());
                
                const maxDim = Math.max(size.x, size.y, size.z);
                const fov = camera.fov * (Math.PI / 180);
                let cameraZ = Math.abs(maxDim / Math.tan(fov / 2)) * 0.8; // 调整系数使模型更大
                
                camera.position.set(0, 0, cameraZ);
                camera.lookAt(center);
                
                // 自动旋转展示
                function animate() {
                    requestAnimationFrame(animate);
                    model.rotation.y += 0.01;
                    renderer.render(scene, camera);
                }
                animate();
            });
            
            previewRenderers.set(previewElement, { scene, camera, renderer });
        }

        // 修改加载模型函数
        function loadModel(url) {
            debugLog('开始加载模型:', url);
            try {
                // 确保场景是空的
                while(currentScene.children.length > 0) { 
                    const object = currentScene.children[0];
                    currentScene.remove(object);
                }
                
                // 添加光源
                const ambientLight = new THREE.AmbientLight(0xffffff, 1);
                currentScene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 5, 5);
                currentScene.add(directionalLight);
                
                const loader = new GLTFLoader();
                loader.load(
                    url,
                    (gltf) => {
                        debugLog('模型加载成功');
                        const model = gltf.scene;
                        currentScene.add(model);

                        // 调整相机位置
                        const box = new THREE.Box3().setFromObject(model);
                        const center = box.getCenter(new THREE.Vector3());
                        const size = box.getSize(new THREE.Vector3());
                        const maxDim = Math.max(size.x, size.y, size.z);
                        const fov = currentCamera.fov * (Math.PI / 180);
                        let cameraZ = Math.abs(maxDim / Math.tan(fov / 2)) * 2;
                        
                        currentCamera.position.set(center.x, center.y, center.z + cameraZ);
                        currentCamera.lookAt(center);
                        currentControls.target.copy(center);
                        debugLog('相机位置已调整');
                    },
                    (xhr) => {
                        const percent = (xhr.loaded / xhr.total * 100).toFixed(2);
                        debugLog(`加载进度: ${percent}%`);
                    },
                    (error) => handleError(error, 'loadModel')
                );
            } catch (error) {
                handleError(error, 'loadModel');
            }
        }

        // 页面加载完成后的初始化
        document.addEventListener('DOMContentLoaded', () => {
            debugLog('DOM加载完成');
            
            try {
                const galleryContainer = document.getElementById('galleryContainer');
                const modelViewer = document.getElementById('modelViewer');
                const closeBtn = document.querySelector('.close');
                const canvasContainer = document.getElementById('canvas-container');
                const toggleDebugBtn = document.getElementById('toggleDebug');
                const debugInfo = document.getElementById('debugInfo');

                debugLog('DOM元素获取状态:', {
                    hasGallery: !!galleryContainer,
                    hasViewer: !!modelViewer,
                    hasCloseBtn: !!closeBtn,
                    hasCanvas: !!canvasContainer
                });

                // 调试开关功能
                if (toggleDebugBtn && debugInfo) {
                    toggleDebugBtn.addEventListener('click', () => {
                        debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
                    });
                }

                // 初始化所有预览
                const modelCards = document.querySelectorAll('.model-card');
                modelCards.forEach(card => {
                    const previewElement = card.querySelector('.model-preview');
                    const modelUrl = card.dataset.modelUrl;
                    if (previewElement && modelUrl) {
                        initPreview(previewElement, modelUrl);
                    }
                });

                // 修改模型卡片点击事件
                if (galleryContainer) {
                    galleryContainer.addEventListener('click', (event) => {
                        const modelCard = event.target.closest('.model-card');
                        if (modelCard) {
                            const modelUrl = modelCard.dataset.modelUrl;
                            debugLog('模型卡片被点击，URL:', modelUrl);
                            
                            modelViewer.style.display = 'block';
                            initViewer(canvasContainer); // 每次都重新化
                            loadModel(modelUrl);
                        }
                    });
                }

                // 关闭按钮事件
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        debugLog('关闭按钮被点击');
                        modelViewer.style.display = 'none';
                    });
                }

                // 窗口大小变化处理
                window.addEventListener('resize', () => {
                    debugLog('窗口大小发生变化');
                    if (currentCamera && currentRenderer) {
                        currentCamera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;
                        currentCamera.updateProjectionMatrix();
                        currentRenderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);
                    }
                });

                // 添加清理函数
                window.addEventListener('beforeunload', () => {
                    previewRenderers.forEach(({ renderer }) => {
                        renderer.dispose();
                    });
                });

                debugLog('事件监听器设置完成');
            } catch (error) {
                handleError(error, 'DOMContentLoaded');
            }
        });
</script>
<style>
    /* 保持原有样式不变 */
    .gallery-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    .models-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
        padding: 1rem;
    }
    
    .model-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
    }
    
    .model-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
    }
    
    .model-preview {
        height: 280px;
        width: 100%;
        background: #f5f5f5;
        position: relative;
        overflow: hidden;
    }
    
    .model-card h3 {
        padding: 1rem;
        margin: 0;
        font-size: 1.2rem;
        text-align: center;
        color: #333;
    }
    
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
    }
    
    .modal-content {
        width: 90%;
        height: 90%;
        margin: 2% auto;
        background: white;
        position: relative;
    }
    
    #canvas-container {
        width: 100%;
        height: 100%;
    }
    
    .close {
        position: absolute;
        right: 20px;
        top: 10px;
        font-size: 30px;
        cursor: pointer;
        color: white;
        z-index: 1001;
    }
</style>