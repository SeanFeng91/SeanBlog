---
import IndexLayout from '../../layouts/IndexLayout.astro';
import planData from '../../../public/2024plan_processed_no_notes.json';
import { format } from 'date-fns';
import { zhCN } from 'date-fns/locale';

const lastUpdated = format(new Date(), 'yyyy年MM月dd日', { locale: zhCN });

function calculateProgress(item) {
  const start = new Date(item.Start);
  const end = new Date(item.Finish);
  const now = new Date();
  const total = end - start;
  const elapsed = now - start;
  return Math.min(100, Math.max(0, Math.round((elapsed / total) * 100)));
}
---

<IndexLayout title="项目进度计划">
  <div slot="maindiv" class="bg-gray-100 min-h-screen">
    <nav class="bg-white shadow-md">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex">
            <div class="flex-shrink-0 flex items-center">
              <img class="h-8 w-auto" src="/logo.svg" alt="Logo">
            </div>
            <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
              <a href="#" class="border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                进度计划
              </a>
              <!-- 其他导航项 -->
            </div>
          </div>
        </div>
      </div>
    </nav>
    <main class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-6">项目进度计划</h2>
      <p class="text-gray-600 mb-8">最后更新时间: {lastUpdated}</p>
      
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div class="bg-white p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold mb-4">甘特图</h3>
          <div id="gantt-chart" class="w-full h-[400px]"></div>
        </div>
        
        <div class="bg-white p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold mb-4">单代号网络图</h3>
          <div id="network-diagram" class="w-full h-[400px]"></div>
        </div>
        
        <div class="bg-white p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold mb-4">进度概览</h3>
          <div id="progress-overview" class="w-full h-[400px]"></div>
        </div>
        
        <div class="bg-white p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold mb-4">关键路径</h3>
          <div id="critical-path" class="w-full h-[400px]"></div>
        </div>
      </div>
    </main>
  </div>
</IndexLayout>

<script>
  import * as d3 from 'd3';
  import planData from '../../../public/2024plan_processed_no_notes.json';

  function createGanttChart() {
    const margin = { top: 20, right: 30, bottom: 30, left: 100 };
    const width = 600 - margin.left - margin.right;
    const height = 350 - margin.top - margin.bottom;

    const svg = d3.select("#gantt-chart")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    const timeScale = d3.scaleTime()
      .domain([d3.min(planData, d => new Date(d.Start)), d3.max(planData, d => new Date(d.Finish))])
      .range([0, width]);

    const yScale = d3.scaleBand()
      .domain(planData.map(d => d.Name))
      .range([0, height])
      .padding(0.2);

    svg.append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(timeScale).ticks(5).tickFormat(d3.timeFormat("%Y-%m-%d")));

    svg.append("g")
      .call(d3.axisLeft(yScale));

    svg.selectAll(".task")
      .data(planData)
      .enter()
      .append("rect")
      .attr("class", "task")
      .attr("y", d => yScale(d.Name))
      .attr("x", d => timeScale(new Date(d.Start)))
      .attr("width", d => timeScale(new Date(d.Finish)) - timeScale(new Date(d.Start)))
      .attr("height", yScale.bandwidth())
      .attr("fill", d => d.Critical ? "#ef4444" : "#3b82f6")
      .attr("opacity", 0.8)
      .append("title")
      .text(d => `${d.Name}\n开始: ${d.Start}\n结束: ${d.Finish}`);
  }

  function createNetworkDiagram() {
    const width = 600;
    const height = 350;

    const svg = d3.select("#network-diagram")
      .append("svg")
      .attr("width", width)
      .attr("height", height);

    const simulation = d3.forceSimulation(planData)
      .force("link", d3.forceLink().id(d => d.Name).distance(100))
      .force("charge", d3.forceManyBody().strength(-300))
      .force("center", d3.forceCenter(width / 2, height / 2));

    const link = svg.append("g")
      .selectAll("line")
      .data(planData.filter(d => d.Predecessors))
      .enter().append("line")
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.6)
      .attr("stroke-width", 2);

    const node = svg.append("g")
      .selectAll("circle")
      .data(planData)
      .enter().append("circle")
      .attr("r", 5)
      .attr("fill", d => d.Critical ? "#ef4444" : "#3b82f6")
      .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended));

    node.append("title")
      .text(d => d.Name);

    simulation.nodes(planData).on("tick", ticked);

    simulation.force("link").links(planData.filter(d => d.Predecessors).map(d => ({
      source: planData.find(p => p.Name === d.Predecessors),
      target: d
    })));

    function ticked() {
      link
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);

      node
        .attr("cx", d => d.x)
        .attr("cy", d => d.y);
    }

    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  }

  function createProgressOverview() {
    const width = 600;
    const height = 350;
    const margin = { top: 20, right: 30, bottom: 40, left: 40 };

    const svg = d3.select("#progress-overview")
      .append("svg")
      .attr("width", width)
      .attr("height", height);

    const x = d3.scaleBand()
      .range([margin.left, width - margin.right])
      .padding(0.1);

    const y = d3.scaleLinear()
      .range([height - margin.bottom, margin.top]);

    const data = [
      { status: "已完成", count: planData.filter(d => calculateProgress(d) === 100).length },
      { status: "进行中", count: planData.filter(d => calculateProgress(d) > 0 && calculateProgress(d) < 100).length },
      { status: "未开始", count: planData.filter(d => calculateProgress(d) === 0).length }
    ];

    x.domain(data.map(d => d.status));
    y.domain([0, d3.max(data, d => d.count)]);

    svg.append("g")
      .attr("transform", `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x));

    svg.append("g")
      .attr("transform", `translate(${margin.left},0)`)
      .call(d3.axisLeft(y));

    svg.selectAll(".bar")
      .data(data)
      .enter().append("rect")
      .attr("class", "bar")
      .attr("x", d => x(d.status))
      .attr("y", d => y(d.count))
      .attr("width", x.bandwidth())
      .attr("height", d => height - margin.bottom - y(d.count))
      .attr("fill", (d, i) => ["#10B981", "#3B82F6", "#6B7280"][i]);

    svg.selectAll(".bar-label")
      .data(data)
      .enter().append("text")
      .attr("class", "bar-label")
      .attr("x", d => x(d.status) + x.bandwidth() / 2)
      .attr("y", d => y(d.count) - 5)
      .attr("text-anchor", "middle")
      .text(d => d.count);
  }

  function createCriticalPath() {
    const width = 600;
    const height = 350;
    const margin = { top: 20, right: 30, bottom: 30, left: 100 };

    const svg = d3.select("#critical-path")
      .append("svg")
      .attr("width", width)
      .attr("height", height);

    const criticalTasks = planData.filter(d => d.Critical);

    const x = d3.scaleTime()
      .domain([d3.min(criticalTasks, d => new Date(d.Start)), d3.max(criticalTasks, d => new Date(d.Finish))])
      .range([margin.left, width - margin.right]);

    const y = d3.scaleBand()
      .domain(criticalTasks.map(d => d.Name))
      .range([margin.top, height - margin.bottom])
      .padding(0.1);

    svg.append("g")
      .attr("transform", `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x));

    svg.append("g")
      .attr("transform", `translate(${margin.left},0)`)
      .call(d3.axisLeft(y));

    svg.selectAll(".task")
      .data(criticalTasks)
      .enter().append("rect")
      .attr("class", "task")
      .attr("x", d => x(new Date(d.Start)))
      .attr("y", d => y(d.Name))
      .attr("width", d => x(new Date(d.Finish)) - x(new Date(d.Start)))
      .attr("height", y.bandwidth())
      .attr("fill", "#ef4444");

    svg.selectAll(".task-label")
      .data(criticalTasks)
      .enter().append("text")
      .attr("class", "task-label")
      .attr("x", d => x(new Date(d.Start)) + 5)
      .attr("y", d => y(d.Name) + y.bandwidth() / 2)
      .attr("dy", "0.35em")
      .text(d => d.Name)
      .attr("fill", "white")
      .attr("font-size", "10px");
  }

  document.addEventListener('DOMContentLoaded', () => {
    createGanttChart();
    createNetworkDiagram();
    createProgressOverview();
    createCriticalPath();
  });
</script>