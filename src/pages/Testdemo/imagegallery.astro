---
import "../../styles/global.css";
import IndexLayout from '../../layouts/IndexLayout.astro';
import fs from 'fs/promises';
import path from 'path';

let errorMessage = '';
let models = [];

// 确保 BASE_URL 总是以 '/' 结尾但不以 '/' 开头
const BASE_URL = (import.meta.env.BASE_URL || '/SeanBlog').replace(/\/$/, '');
console.log(`Base URL: ${BASE_URL}`);

async function getModelsFromDirectory() {
  try {
    const baseDir = 'public/models';
    const files = await fs.readdir(baseDir);
    console.log(`找到模型文件: ${files.join(', ')}`);
    
    const modelFiles = files.filter(file => ['.glb'].includes(path.extname(file).toLowerCase()));
    
    const modelItems = modelFiles.map((file, index) => {
      const modelPath = path.join(baseDir, file);
      console.log(`处理模型: ${modelPath}`);
      
      // 修正模型路径，确保正确的URL格式
      const modelSrc = `${BASE_URL}/models/${file}`;
      console.log(`Model src: ${modelSrc}`);
      
      return {
        id: index + 1,
        src: modelSrc,
        title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim()
      };
    });

    console.log(`处理后的模型数量: ${modelItems.length}`);
    return modelItems;
  } catch (error) {
    console.error('读取模型目录失败:', error);
    return [];
  }
}

try {
  models = await getModelsFromDirectory();
  console.log(`Total models: ${models.length}`);
} catch (error) {
  console.error('Error occurred:', error);
  errorMessage = `Error: ${error.message}`;
}
---

<IndexLayout pageTitle="3D Models Gallery">
    <div slot="maindiv">
        <h1>3D 模型展示</h1>
        <p>欢迎来到我们的 3D 模型展示页面。在这里，您可以浏览和互动各种精美的 3D 模型。点击任何模型卡片以在查看器中打开并探索。</p>
        <p>使用了Tripo 3D的AI模型生成功能，根据图片生成了3D模型。使用Three.js导入glb格式模型进行展示</p>
    
        {errorMessage && <p style="color: red;">{errorMessage}</p>}
        
        <div class="gallery-container" id="galleryContainer">
            <div class="models-grid">
                {models.map((model) => (
                    <div class="model-card" data-model-url={model.src}>
                        <div class="model-preview"></div>
                        <h3>{model.title}</h3>
                    </div>
                ))}
            </div>
        </div>

        <div id="modelViewer" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <div id="canvas-container"></div>
            </div>
        </div>
    </div>

    <style>
        /* 保持原有样式不变 */
        .gallery-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .models-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 2rem;
            padding: 1rem;
        }
        
        .model-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }
        
        .model-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
        }
        
        .model-preview {
            height: 280px;
            width: 100%;
            background: #f5f5f5;
            position: relative;
            overflow: hidden;
        }
        
        .model-preview canvas {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100% !important;
            height: 100% !important;
        }
        
        .model-card h3 {
            padding: 1rem;
            margin: 0;
            font-size: 1.2rem;
            text-align: center;
            color: #333;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
        }
        
        .modal-content {
            width: 90%;
            height: 90%;
            margin: 2% auto;
            background: white;
            position: relative;
        }
        
        #canvas-container {
            width: 100%;
            height: 100%;
        }
        
        .close {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 30px;
            cursor: pointer;
            color: white;
            z-index: 1001;
        }
    </style>

    <script>
        // 确保 Three.js 和相关库被正确加载
        import * as THREE from 'three';
        import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

        // 存储当前场景状态的全局变量
        let currentScene, currentCamera, currentRenderer, currentControls;
        let currentModel = null;

        function cleanupScene() {
            if (currentScene) {
                // 清理当前模型
                if (currentModel) {
                    currentScene.remove(currentModel);
                    if (currentModel.geometry) currentModel.geometry.dispose();
                    if (currentModel.material) currentModel.material.dispose();
                }
                
                // 清理场景中的其他对象
                currentScene.traverse((object) => {
                    if (object.geometry) object.geometry.dispose();
                    if (object.material) {
                        if (Array.isArray(object.material)) {
                            object.material.forEach(material => material.dispose());
                        } else {
                            object.material.dispose();
                        }
                    }
                });
            }
        }

        function initViewer(containerElement) {
            console.log('初始化查看器');
            cleanupScene();

            // 创建新场景
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf0f0f0);

            // 设置相机
            const camera = new THREE.PerspectiveCamera(
                75,
                containerElement.clientWidth / containerElement.clientHeight,
                0.1,
                1000
            );
            camera.position.set(5, 5, 5);

            // 创建渲染器
            const renderer = new THREE.WebGLRenderer({ 
                antialias: true,
                powerPreference: "high-performance"
            });
            renderer.setSize(containerElement.clientWidth, containerElement.clientHeight);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            containerElement.innerHTML = ''; // 清除之前的内容
            containerElement.appendChild(renderer.domElement);

            // 设置光源
            const ambientLight = new THREE.AmbientLight(0xffffff, 1);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);

            // 设置控制器
            const controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.screenSpacePanning = false;
            controls.maxPolarAngle = Math.PI / 2;

            currentScene = scene;
            currentCamera = camera;
            currentRenderer = renderer;
            currentControls = controls;

            // 动画循环
            function animate() {
                if (!currentRenderer) return;
                
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
        }

        function loadModel(url) {
            console.log('加载模型:', url);
            if (!currentScene || !currentCamera || !currentRenderer) {
                console.error('查看器未初始化');
                return;
            }

            cleanupScene();

            const loader = new GLTFLoader();
            
            loader.load(
                url,
                (gltf) => {
                    console.log('模型加载成功:', gltf);
                    const model = gltf.scene;
                    currentModel = model;
                    currentScene.add(model);

                    // 自动调整相机位置
                    const box = new THREE.Box3().setFromObject(model);
                    const center = box.getCenter(new THREE.Vector3());
                    const size = box.getSize(new THREE.Vector3());
                    
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const fov = currentCamera.fov * (Math.PI / 180);
                    let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2)) * 2;
                    
                    currentCamera.position.set(center.x, center.y, center.z + cameraZ);
                    currentCamera.lookAt(center);
                    currentControls.target.copy(center);
                    currentControls.update();
                },
                (xhr) => {
                    console.log(`加载进度: ${(xhr.loaded / xhr.total * 100).toFixed(2)}%`);
                },
                (error) => {
                    console.error('模型加载失败:', error);
                }
            );
        }

        // 将函数暴露给全局作用域
        window.modelViewer = {
            initViewer,
            loadModel
        };

        // 初始化页面交互
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM Content Loaded');
            
            const galleryContainer = document.getElementById('galleryContainer');
            const modelViewer = document.getElementById('modelViewer');
            const closeBtn = document.querySelector('.close');
            const canvasContainer = document.getElementById('canvas-container');

            if (!galleryContainer || !modelViewer || !closeBtn || !canvasContainer) {
                console.error('必要的元素未找到');
                return;
            }

            // 处理模型卡片点击
            galleryContainer.addEventListener('click', (event) => {
                const modelCard = event.target.closest('.model-card');
                if (modelCard) {
                    const modelUrl = modelCard.dataset.modelUrl;
                    console.log('模型卡片被点击:', modelUrl);
                    
                    modelViewer.style.display = 'block';
                    
                    // 确保查看器已初始化
                    if (!window.modelViewer.currentRenderer) {
                        window.modelViewer.initViewer(canvasContainer);
                    }
                    
                    // 加载模型
                    window.modelViewer.loadModel(modelUrl);
                }
            });

            // 处理关闭按钮点击
            closeBtn.addEventListener('click', () => {
                modelViewer.style.display = 'none';
                cleanupScene();
            });

            // 处理窗口大小变化
            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    if (currentCamera && currentRenderer) {
                        currentCamera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;
                        currentCamera.updateProjectionMatrix();
                        currentRenderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);
                    }
                }, 250);
            });
        });
    </script>
</IndexLayout>
