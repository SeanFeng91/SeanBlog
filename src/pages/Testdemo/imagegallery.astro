---
import IndexLayout from '../layouts/IndexLayout.astro';
import fs from 'fs/promises';
import path from 'path';

let errorMessage = '';
let models = [];

const BASE_URL = import.meta.env.BASE_URL || '/SeanBlog';
console.log(`Base URL: ${BASE_URL}`);

async function getModelsFromDirectory() {
    // ... 保持原有的模型获取逻辑 ...
}

try {
    models = await getModelsFromDirectory();
} catch (error) {
    console.error('Error occurred:', error);
    errorMessage = `Error: ${error.message}`;
}
---

<IndexLayout pageTitle="3D Models Gallery">
    <div slot="maindiv">
        <h1>3D 模型展示</h1>
        <p>欢迎来到我们的 3D 模型展示页面。在这里，您可以浏览和互动各种精美的 3D 模型。点击任何模型卡片以在查看器中打开并探索。</p>
        <p>使用了Tripo 3D的AI模型生成功能，根据图片生成了3D模型。</p>
    
        {errorMessage && <p style="color: red;">{errorMessage}</p>}
        
        <!-- 添加调试区域 -->
        <div id="debugArea" style="background-color: #f0f0f0; padding: 10px; margin-top: 20px; border: 1px solid #ccc; max-height: 200px; overflow-y: auto;">
            <h3>调试信息：</h3>
            <pre id="debugLog"></pre>
        </div>
        
        <div class="gallery-container" id="galleryContainer">
            <div class="models-grid">
                {models.map((model) => (
                    <div class="model-card" data-model-url={model.src}>
                        <div class="model-preview"></div>
                        <h3>{model.title}</h3>
                    </div>
                ))}
            </div>
        </div>

        <div id="modelViewer" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <div id="canvas-container"></div>
            </div>
        </div>
    </div>

    <style>
        /* ... 保持原有样式 ... */
    </style>

    <script>
        function debugLog(message) {
            const debugLogElement = document.getElementById('debugLog');
            if (debugLogElement) {
                debugLogElement.innerHTML += message + '\n';
                debugLogElement.scrollTop = debugLogElement.scrollHeight;
            }
            console.log(message);
        }

        debugLog('脚本开始执行');

        document.addEventListener('DOMContentLoaded', () => {
            debugLog('DOM Content Loaded');
            
            const galleryContainer = document.getElementById('galleryContainer');
            const modelViewer = document.getElementById('modelViewer');
            const closeBtn = document.querySelector('.close');

            if (!galleryContainer || !modelViewer || !closeBtn) {
                debugLog('错误：必要的元素未找到');
                return;
            }

            // 使用事件委托处理点击事件
            galleryContainer.addEventListener('click', (event) => {
                const modelCard = event.target.closest('.model-card');
                if (modelCard) {
                    const modelUrl = modelCard.dataset.modelUrl;
                    debugLog('模型卡片被点击: ' + modelUrl);
                    
                    modelViewer.style.display = 'block';
                    // 这里原本是加载模型的逻辑，现在我们只显示 URL
                    document.getElementById('canvas-container').textContent = '模型 URL: ' + modelUrl;
                }
            });

            // 关闭查看器
            closeBtn.addEventListener('click', () => {
                modelViewer.style.display = 'none';
                debugLog('查看器已关闭');
            });

            debugLog('事件监听器设置完成');
        });

        debugLog('脚本执行完毕');
    </script>
</IndexLayout>
