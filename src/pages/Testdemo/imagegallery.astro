---
import "../../styles/global.css";
import IndexLayout from '../../layouts/IndexLayout.astro';
import fs from 'fs/promises';
import path from 'path';

// 添加调试函数
function debug(message, ...args) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${message}`, ...args);
}

// 在页面加载时立即输出调试信息
const debugScript = `
    console.log('[Debug] 页面初始化开始 -----------');
    console.log('[Debug] Window URL:', window.location.href);
    console.log('[Debug] Document Ready State:', document.readyState);
`;

let errorMessage = '';
let models = [];

// 确保 BASE_URL 正确设置
const BASE_URL = (import.meta.env.BASE_URL || '/SeanBlog').replace(/\/$/, '');
debug('Base URL configured as:', BASE_URL);

async function getModelsFromDirectory() {
    debug('开始读取模型目录');
    try {
        const baseDir = 'public/models';
        const files = await fs.readdir(baseDir);
        debug('找到的文件:', files);
        
        const modelFiles = files.filter(file => ['.glb'].includes(path.extname(file).toLowerCase()));
        debug('筛选后的模型文件:', modelFiles);
        
        const modelItems = modelFiles.map((file, index) => {
            const modelSrc = `${BASE_URL}/models/${file}`;
            debug('处理模型:', { file, modelSrc });
            
            return {
                id: index + 1,
                src: modelSrc,
                title: path.parse(file).name.replace(/([A-Z])/g, ' $1').trim()
            };
        });

        debug('处理完成的模型列表:', modelItems);
        return modelItems;
    } catch (error) {
        debug('读取模型目录失败:', error);
        return [];
    }
}

try {
    models = await getModelsFromDirectory();
    debug('模型加载完成，总数:', models.length);
} catch (error) {
    debug('发生错误:', error);
    errorMessage = `Error: ${error.message}`;
}
---

<IndexLayout pageTitle="3D Models Gallery">
    <!-- 添加调试信息显示区域 -->
    <div id="debugInfo" style="position: fixed; bottom: 0; left: 0; background: rgba(0,0,0,0.8); color: white; padding: 10px; max-height: 200px; overflow-y: auto; width: 100%; display: none;">
        <div id="debugContent"></div>
    </div>

    <div slot="maindiv">
        <h1>3D 模型展示</h1>
        <!-- 添加调试开关 -->
        <button id="toggleDebug" style="position: fixed; bottom: 10px; right: 10px; z-index: 1000;">
            Toggle Debug
        </button>
        
        <p>欢迎来到我们的 3D 模型展示页面。在这里，您可以浏览和互动各种精美的 3D 模型。点击任何模型卡片以在查看器中打开并探索。</p>
        <p>使用了Tripo 3D的AI模型生成功能，根据图片生成了3D模型。使用Three.js导入glb格式模型进行展示</p>
    
        {errorMessage && <p style="color: red;">{errorMessage}</p>}
        
        <!-- 添加一个用于测试 Three.js 的容器 -->
        <div id="threeJsTest" style="width: 300px; height: 300px; margin: 20px auto;"></div>

        <!-- 添加调试区域 -->
        <div id="debugArea" style="background-color: #f0f0f0; padding: 10px; margin-top: 20px; border: 1px solid #ccc; max-height: 200px; overflow-y: auto;">
            <h3>调试信息：</h3>
            <pre id="debugLog"></pre>
        </div>
        
        <div class="gallery-container" id="galleryContainer">
            <div class="models-grid">
                {models.map((model) => (
                    <div class="model-card" data-model-url={model.src}>
                        <div class="model-preview"></div>
                        <h3>{model.title}</h3>
                    </div>
                ))}
            </div>
        </div>

        <div id="modelViewer" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <div id="canvas-container"></div>
            </div>
        </div>
    </div>

    <!-- 注入初始调试脚本 -->
    <script is:inline set:html={debugScript} />

    <script>
        // 调试工具函数
        function debugLog(message, ...args) {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] ${message}`, ...args);
            
            // 同时更新调试信息面板
            const debugContent = document.getElementById('debugContent');
            if (debugContent) {
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${timestamp}] ${message} ${args.map(arg => JSON.stringify(arg)).join(' ')}`;
                debugContent.appendChild(logEntry);
                debugContent.scrollTop = debugContent.scrollHeight;
            }
        }

        // 错误处理函数
        function handleError(error, context) {
            debugLog(`Error in ${context}:`, error);
            console.error(error);
        }

        // 导入 Three.js
        import * as THREE from 'three';
        import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

        debugLog('Three.js 版本:', THREE.REVISION);

        let currentScene, currentCamera, currentRenderer, currentControls;

        // 初始化查看器
        function initViewer(containerElement) {
            debugLog('初始化查看器');
            try {
                // 创建场景
                currentScene = new THREE.Scene();
                currentScene.background = new THREE.Color(0xf0f0f0);
                debugLog('场景创建成功');

                // 创建相机
                currentCamera = new THREE.PerspectiveCamera(
                    75,
                    containerElement.clientWidth / containerElement.clientHeight,
                    0.1,
                    1000
                );
                currentCamera.position.set(5, 5, 5);
                debugLog('相机设置完成');

                // 创建渲染器
                currentRenderer = new THREE.WebGLRenderer({ antialias: true });
                currentRenderer.setSize(containerElement.clientWidth, containerElement.clientHeight);
                containerElement.appendChild(currentRenderer.domElement);
                debugLog('渲染器创建成功');

                // 添加光源
                const ambientLight = new THREE.AmbientLight(0xffffff, 1);
                currentScene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 5, 5);
                currentScene.add(directionalLight);
                debugLog('光源添加完成');

                // 添加控制器
                currentControls = new OrbitControls(currentCamera, currentRenderer.domElement);
                currentControls.enableDamping = true;
                debugLog('控制器设置完成');

                // 动画循环
                function animate() {
                    requestAnimationFrame(animate);
                    currentControls.update();
                    currentRenderer.render(currentScene, currentCamera);
                }
                animate();
                debugLog('动画循环启动');

            } catch (error) {
                handleError(error, 'initViewer');
            }
        }

        // 加载模型
        function loadModel(url) {
            debugLog('开始加载模型:', url);
            try {
                const loader = new GLTFLoader();
                
                loader.load(
                    url,
                    (gltf) => {
                        debugLog('模型加载成功');
                        const model = gltf.scene;
                        currentScene.add(model);

                        // 调整相机位置
                        const box = new THREE.Box3().setFromObject(model);
                        const center = box.getCenter(new THREE.Vector3());
                        const size = box.getSize(new THREE.Vector3());
                        const maxDim = Math.max(size.x, size.y, size.z);
                        const fov = currentCamera.fov * (Math.PI / 180);
                        let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2)) * 2;
                        
                        currentCamera.position.set(center.x, center.y, center.z + cameraZ);
                        currentCamera.lookAt(center);
                        currentControls.target.copy(center);
                        debugLog('相机位置已调整');
                    },
                    (xhr) => {
                        const percent = (xhr.loaded / xhr.total * 100).toFixed(2);
                        debugLog(`加载进度: ${percent}%`);
                    },
                    (error) => handleError(error, 'loadModel')
                );
            } catch (error) {
                handleError(error, 'loadModel');
            }
        }

        // 页面加载完成后的初始化
        document.addEventListener('DOMContentLoaded', () => {
            debugLog('DOM加载完成');
            
            try {
                const galleryContainer = document.getElementById('galleryContainer');
                const modelViewer = document.getElementById('modelViewer');
                const closeBtn = document.querySelector('.close');
                const canvasContainer = document.getElementById('canvas-container');
                const toggleDebugBtn = document.getElementById('toggleDebug');
                const debugInfo = document.getElementById('debugInfo');

                debugLog('DOM元素获取状态:', {
                    hasGallery: !!galleryContainer,
                    hasViewer: !!modelViewer,
                    hasCloseBtn: !!closeBtn,
                    hasCanvas: !!canvasContainer
                });

                // 调试开关功能
                if (toggleDebugBtn && debugInfo) {
                    toggleDebugBtn.addEventListener('click', () => {
                        debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
                    });
                }

                // 模型卡片点击事件
                if (galleryContainer) {
                    galleryContainer.addEventListener('click', (event) => {
                        const modelCard = event.target.closest('.model-card');
                        if (modelCard) {
                            const modelUrl = modelCard.dataset.modelUrl;
                            debugLog('模型卡片被点击，URL:', modelUrl);
                            
                            modelViewer.style.display = 'block';
                            if (!currentRenderer) {
                                initViewer(canvasContainer);
                            }
                            loadModel(modelUrl);
                        }
                    });
                }

                // 关闭按钮事件
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        debugLog('关闭按钮被点击');
                        modelViewer.style.display = 'none';
                    });
                }

                // 窗口大小变化处理
                window.addEventListener('resize', () => {
                    debugLog('窗口大小发生变化');
                    if (currentCamera && currentRenderer) {
                        currentCamera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;
                        currentCamera.updateProjectionMatrix();
                        currentRenderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);
                    }
                });

                debugLog('事件监听器设置完成');
            } catch (error) {
                handleError(error, 'DOMContentLoaded');
            }
        });

        // 将调试工具暴露给全局作用域
        window.debugLog = debugLog;
        window.modelViewer = {
            initViewer,
            loadModel
        };
    </script>

    <style>
        /* 保持原有样式不变 */
        .gallery-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .models-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 2rem;
            padding: 1rem;
        }
        
        .model-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }
        
        .model-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
        }
        
        .model-preview {
            height: 280px;
            width: 100%;
            background: #f5f5f5;
            position: relative;
            overflow: hidden;
        }
        
        .model-card h3 {
            padding: 1rem;
            margin: 0;
            font-size: 1.2rem;
            text-align: center;
            color: #333;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
        }
        
        .modal-content {
            width: 90%;
            height: 90%;
            margin: 2% auto;
            background: white;
            position: relative;
        }
        
        #canvas-container {
            width: 100%;
            height: 100%;
        }
        
        .close {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 30px;
            cursor: pointer;
            color: white;
            z-index: 1001;
        }
    </style>

    <script is:inline>
        document.getElementById('debugLog').innerHTML += '基本内联脚本执行\n';

        window.onerror = function(message, source, lineno, colno, error) {
            document.getElementById('debugLog').innerHTML += '捕获到错误: ' + message + '\n';
            return false;
        };
    </script>

    <script>
        document.getElementById('debugLog').innerHTML += '开始加载主脚本\n';

        function debugLog(message) {
            const debugLogElement = document.getElementById('debugLog');
            if (debugLogElement) {
                debugLogElement.innerHTML += message + '\n';
                debugLogElement.scrollTop = debugLogElement.scrollHeight;
            }
            console.log(message);
        }

        debugLog('正在加载 Three.js...');
        
        try {
            import * as THREE from 'three';
            debugLog('Three.js 加载完成');

            // 创建一个基本的 Three.js 场景
            function createBasicScene() {
                debugLog('开始创建基本 Three.js 场景');
                const scene = new THREE.Scene();
                const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
                const renderer = new THREE.WebGLRenderer();
                renderer.setSize(300, 300);
                document.getElementById('threeJsTest').appendChild(renderer.domElement);

                const geometry = new THREE.BoxGeometry();
                const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
                const cube = new THREE.Mesh(geometry, material);
                scene.add(cube);

                camera.position.z = 5;

                function animate() {
                    requestAnimationFrame(animate);
                    cube.rotation.x += 0.01;
                    cube.rotation.y += 0.01;
                    renderer.render(scene, camera);
                }
                animate();
                debugLog('基本 Three.js 场景创建完成');
            }

            // 在 DOM 加载完成后创建场景
            document.addEventListener('DOMContentLoaded', createBasicScene);

        } catch (error) {
            debugLog('Three.js 加载或执行失败: ' + error.message);
        }

        // ... 其余代码保持不变 ...

        debugLog('主脚本加载完成');
    </script>
</IndexLayout>
