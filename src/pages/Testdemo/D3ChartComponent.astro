---
// D3ChartComponent.astro
import * as d3 from 'd3';
---

<div id="chart"></div>

<script>
  console.log('脚本开始执行');

  function drawChart() {
    console.log('开始绘制图表');
    const svg = d3.select("#chart")
                  .append("svg")
                  .attr("width", 960)
                  .attr("height", 600);
    
    console.log('SVG元素已创建');

    // 数据（保持不变）
    const graph = {
      "nodes": [
        {"id": "Farmers", "group": 1},
        {"id": "Food Makers", "group": 1},
        {"id": "Locals", "group": 2},
        // 添加其他必要的节点
      ],
      "links": [
        {"source": "Farmers", "target": "Locals", "value": 1, "label": "sell food"},
        {"source": "Farmers", "target": "Food Makers", "value": 1, "label": "grow food"},
        // 添加其他必要的链接
      ]
    };

    const simulation = d3.forceSimulation(graph.nodes)
                         .force("link", d3.forceLink(graph.links).id(d => d.id).distance(200))
                         .force("charge", d3.forceManyBody().strength(-500))
                         .force("center", d3.forceCenter(960 / 2, 600 / 2));

    const link = svg.append("g")
                    .attr("class", "links")
                    .selectAll("g")
                    .data(graph.links)
                    .enter().append("g");

    link.append("line")
        .attr("stroke-width", d => Math.sqrt(d.value))
        .attr("stroke", "#999");

    link.append("text")
        .attr("font-size", "8px")
        .attr("fill", "#666")
        .attr("text-anchor", "middle")
        .attr("dy", -2)
        .text(d => d.label);

    const node = svg.append("g")
                    .attr("class", "nodes")
                    .selectAll("g")
                    .data(graph.nodes)
                    .enter().append("g")
                    .call(d3.drag()
                           .on("start", dragstarted)
                           .on("drag", dragged)
                           .on("end", dragended));

    node.append("circle")
        .attr("r", 30)
        .attr("fill", d => d3.schemeCategory10[d.group]);

    node.append("text")
        .attr("font-size", "10px")
        .attr("fill", "white")
        .attr("text-anchor", "middle")
        .attr("dominant-baseline", "central")
        .text(d => d.id);

    simulation.on("tick", () => {
      link.select("line")
          .attr("x1", d => d.source.x)
          .attr("y1", d => d.source.y)
          .attr("x2", d => d.target.x)
          .attr("y2", d => d.target.y);

      link.select("text")
          .attr("x", d => (d.source.x + d.target.x) / 2)
          .attr("y", d => (d.source.y + d.target.y) / 2)
          .attr("transform", d => {
            const dx = d.target.x - d.source.x;
            const dy = d.target.y - d.source.y;
            const angle = Math.atan2(dy, dx) * 180 / Math.PI;
            return `rotate(${angle}, ${(d.source.x + d.target.x) / 2}, ${(d.source.y + d.target.y) / 2})`;
          });

      node
          .attr("transform", d => `translate(${d.x},${d.y})`);
    });

    function dragstarted(event, d) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(event, d) {
      d.fx = event.x;
      d.fy = event.y;
    }

    function dragended(event, d) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }

    console.log('图表绘制完成');
  }

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM已加载');
    drawChart();
  });
</script>

<style>
  #chart {
    width: 960px;
    height: 600px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    margin: 0 auto;
  }
</style>