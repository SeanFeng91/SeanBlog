---
import "../../styles/global.css";
import IndexLayout from '../../layouts/IndexLayout.astro';
// import Footer from '../components/Footer.astro';
// import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
const title = "QGIS Spatial Analysis Web Demo";
---

<IndexLayout>
	<div slot="maindiv"> 
    <h1>{title}</h1>
    <div class="analysis-controls">
        <button onclick="toggleRoadAnalysis()">道路分析</button>
        <button onclick="toggleBuildingAnalysis()">建筑密度分析</button>
        <button onclick="toggleHeatmapAnalysis()">POI热力图</button>
        <button onclick="toggleAccessibilityAnalysis()">步行可达性</button>
        <div id="analysis-options" style="display: none;">
            <div class="analysis-row">
                <label>分析范围 (米):</label>
                <input type="number" id="searchRadius" value="1000">
                <label>POI类型:</label>
                <select id="poiType">
                    <option value="restaurant">餐馆</option>
                    <option value="shop">商店</option>
                    <option value="school">学校</option>
                    <option value="hospital">医院</option>
                </select>
            </div>
            <div class="analysis-row" id="walkingOptions" style="display: none;">
                <label>步行时间 (分钟):</label>
                <input type="number" id="walkingTime" value="15" min="5" max="30">
                <label>步行速度 (km/h):</label>
                <input type="number" id="walkingSpeed" value="4.8" step="0.1">
            </div>
            <button onclick="runAnalysis()">执行分析</button>
        </div>
        <div id="analysis-info"></div>
    </div>
    <div id="map"></div>
  </div>
</IndexLayout>

<!-- 添加 Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />

<style>
    #map {
        width: 100%;
        height: 600px;
    }
    .analysis-controls {
        margin: 10px 0;
        padding: 10px;
        background: #f5f5f5;
        border-radius: 4px;
    }
    .analysis-controls input {
        width: 80px;
        margin: 0 10px;
    }
    #analysis-info {
        margin-top: 10px;
        color: #666;
    }
    .analysis-controls button {
        margin: 5px;
        padding: 5px 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .analysis-controls button:hover {
        background-color: #45a049;
    }
    #analysis-options {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    .analysis-row {
        margin: 8px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .style-options {
        margin: 10px 0;
        padding: 10px;
        background: #eee;
        border-radius: 4px;
    }
    .analysis-controls input[type="number"] {
        width: 60px;
    }
    .analysis-controls input[type="range"] {
        width: 100px;
    }
</style>

<script is:inline src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/leaflet-qgis-plugin/dist/leaflet-qgis.min.js"></script>
<script is:inline>
    // 初始化地图
    const map = L.map('map').setView([39.9042, 116.4074], 13); // 默认北京市中心

    // 添加底图
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
    }).addTo(map);

    let currentAnalysisMode = null;
    let analysisLayer = null;
    let searchArea = null;

    // 添加点击获取分析中心点的功能
    let centerMarker = null;
    map.on('click', function(e) {
        if (currentAnalysisMode) {
            if (centerMarker) {
                map.removeLayer(centerMarker);
            }
            centerMarker = L.marker(e.latlng).addTo(map);
            document.getElementById('analysis-info').innerHTML = '已选择分析中心点，点击"执行分析"开始分析';
        }
    });

    function toggleRoadAnalysis() {
        currentAnalysisMode = 'road';
        document.getElementById('analysis-options').style.display = 'block';
        document.getElementById('analysis-info').innerHTML = '请点击地图选择分析中心点';
    }

    function toggleBuildingAnalysis() {
        currentAnalysisMode = 'building';
        document.getElementById('analysis-options').style.display = 'block';
        document.getElementById('analysis-info').innerHTML = '请点击地图选择分析中心点';
    }

    // 添加热力图库
    let heatmapLayer = null;
    
    function toggleHeatmapAnalysis() {
        currentAnalysisMode = 'heatmap';
        document.getElementById('analysis-options').style.display = 'block';
        document.getElementById('walkingOptions').style.display = 'none';
        document.getElementById('analysis-info').innerHTML = '请点击地图选择分析中心点';
    }

    function toggleAccessibilityAnalysis() {
        currentAnalysisMode = 'accessibility';
        document.getElementById('analysis-options').style.display = 'block';
        document.getElementById('walkingOptions').style.display = 'block';
        document.getElementById('analysis-info').innerHTML = '请点击地图选择分析中心点';
    }

    async function runAnalysis() {
        if (!centerMarker) {
            alert('请先点击地图选择分析中心点');
            return;
        }

        // 清除之前的图层
        if (analysisLayer) map.removeLayer(analysisLayer);
        if (heatmapLayer) map.removeLayer(heatmapLayer);

        const searchRadius = document.getElementById('searchRadius').value;
        const center = centerMarker.getLatLng();

        if (currentAnalysisMode === 'heatmap') {
            const poiType = document.getElementById('poiType').value;
            const query = `[out:json][timeout:25];
                node(around:${searchRadius},${center.lat},${center.lng})["amenity"="${poiType}"];
                out body;`;

            try {
                const response = await fetch('https://overpass-api.de/api/interpreter', {
                    method: 'POST',
                    body: query
                });
                const data = await response.json();

                const heatData = data.elements.map(element => {
                    return [element.lat, element.lon, 1];
                });

                heatmapLayer = L.heatLayer(heatData, {
                    radius: 25,
                    blur: 15,
                    maxZoom: 18,
                    max: 1.0
                }).addTo(map);

                document.getElementById('analysis-info').innerHTML = 
                    `分析完成：找到 ${data.elements.length} 个 ${poiType} 类型的POI点`;

            } catch (error) {
                document.getElementById('analysis-info').innerHTML = '分析出错：' + error.message;
            }
        } 
        else if (currentAnalysisMode === 'accessibility') {
            const walkingTime = document.getElementById('walkingTime').value;
            const walkingSpeed = document.getElementById('walkingSpeed').value;
            const distance = (walkingSpeed * walkingTime / 60); // 转换为公里

            try {
                // 首先创建步行时间圈
                const circle = turf.circle(
                    [center.lng, center.lat],
                    distance,
                    {steps: 64, units: 'kilometers'}
                );

                // 添加半透明的步行范围圈
                analysisLayer = L.geoJSON(circle, {
                    style: {
                        color: '#1e88e5',
                        fillColor: '#1e88e5',
                        fillOpacity: 0.1,
                        weight: 2,
                        dashArray: '5, 5'  // 虚线边框
                    }
                }).addTo(map);

                // 获取范围内的POI点
                const poiType = document.getElementById('poiType').value;
                const query = `[out:json][timeout:25];
                    node(around:${distance*1000},${center.lat},${center.lng})["amenity"="${poiType}"];
                    out body;`;

                const response = await fetch('https://overpass-api.de/api/interpreter', {
                    method: 'POST',
                    body: query
                });
                const data = await response.json();

                // 为每个POI点添加标记
                data.elements.forEach(element => {
                    L.circleMarker([element.lat, element.lon], {
                        radius: 6,
                        fillColor: '#e74c3c',
                        color: '#c0392b',
                        weight: 1,
                        opacity: 1,
                        fillOpacity: 0.8
                    })
                    .bindPopup(`${poiType}`) // 添加弹出提示
                    .addTo(map);
                });

                document.getElementById('analysis-info').innerHTML = 
                    `分析完成：${walkingTime}分钟步行范围内有 ${data.elements.length} 个${poiType}
                    <br>步行距离：${distance.toFixed(2)}公里`;

            } catch (error) {
                document.getElementById('analysis-info').innerHTML = '分析出错：' + error.message;
            }
        }
        // ... 保留原有的 road 和 building 分析代码 ...
    }
</script>

<!-- 添加必要的库 -->
<script src="https://unpkg.com/osmtogeojson@3.0.0-beta.4/osmtogeojson.js" is:inline></script>
<script src="https://unpkg.com/@turf/turf@6/turf.min.js" is:inline></script>

<!-- 添加热力图库 -->
<script src="https://unpkg.com/leaflet.heat@0.2.0/dist/leaflet-heat.js" is:inline></script>
