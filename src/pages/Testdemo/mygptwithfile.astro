---
import "../../styles/global.css";
import IndexLayout from "../../layouts/IndexLayout.astro";
---

<style>
/* 写入global.css就可以了 */
body {
    font-family: Arial, sans-serif;
}

.chat-bubble {
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    max-width: 80%;
    word-wrap: break-word;
}

.user-bubble {
    background-color: #DCF8C6;
    align-self: flex-end;
}

.assistant-bubble {
    background-color: #F1F0F0;
    align-self: flex-start;
}

.message-wrapper {
    display: flex;
    flex-direction: column;
}

.user-wrapper {
    align-items: flex-end;
}

.assistant-wrapper {
    align-items: flex-start;
}

#chat-box {
    display: flex;
    flex-direction: column;
}

#saved-records {
    max-height: 200px;
    overflow-y: auto;
}

.chat-bubble {
    max-width: 100%;
    word-wrap: break-word;
}

.assistant-bubble {
    width: 100%;
}

.tooltip {
    position: absolute;
    text-align: center;
    padding: 8px;
    font: 12px sans-serif;
    background: lightsteelblue;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
}

/* 添加以下样式 */
.chart-wrapper {
    position: relative;
    width: 100%;
    min-height: 400px;
    resize: both;
    overflow: auto;
    border: 1px solid #ccc;
}

.chart-wrapper::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: 0;
    width: 10px;
    height: 10px;
    background: #ccc;
    cursor: se-resize;
}
</style>

<IndexLayout>
  <div class="bg-gray-100 h-screen flex overflow-hidden" slot="maindiv">
    <!-- Sidebar -->
    <div class="w-64 bg-white p-6 shadow-lg flex flex-col">
        <h2 class="text-xl font-bold mb-4">Settings</h2>
        <input type="text" id="api-key-input" placeholder="Enter your Kimi API Key" class="mb-4 p-2 border border-gray-300 rounded w-full" />
        <button id="clear-history-button" class="bg-red-500 text-white p-2 rounded mb-4 hover:bg-red-700">Clear All History</button>
        <button id="save-current-button" class="bg-green-500 text-white p-2 rounded mb-4 hover:bg-green-700">Save Current Record</button>
        <button id="create-new-button" class="bg-blue-500 text-white p-2 rounded mb-4 hover:bg-blue-700">Create New Chat</button>
        <div id="saved-records" class="flex flex-col space-y-2 overflow-y-auto">
            <!-- Dynamically generated saved records will appear here -->
        </div>
    </div>
    <!-- Main Chat Interface -->
    <div class="flex-1 flex flex-col">
        <div id="chat-box" class="flex-1 p-4 border-2 border-spacing-1 border-gray-300 rounded bg-white overflow-y-auto mb-4 w-full" style="min-height: 400px;">
            <!-- Chat messages will appear here -->
        </div>
        <div class="flex p-4 border-t border-gray-300">
            <input type="text" id="message-input" placeholder="Enter your message" class="flex-1 p-2 border border-gray-300 rounded mr-2" />
            <button id="send-button" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Send</button>
        </div>
    </div>
  </div>
</IndexLayout>

<script>
    import { marked } from 'marked';
    
    // 使用 Promise 来加载 D3
    const d3Promise = import('d3');

    document.addEventListener('DOMContentLoaded', async () => {
        await loadChatHistory();
        renderSavedRecords();

        document.getElementById('send-button').addEventListener('click', sendMessage);
        document.getElementById('clear-history-button').addEventListener('click', clearChatHistory);
        document.getElementById('save-current-button').addEventListener('click', saveCurrentRecord);
        document.getElementById('create-new-button').addEventListener('click', createNewChat);
    });

    async function loadChatHistory() {
        const chatBox = document.getElementById('chat-box');
        const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
        chatBox.innerHTML = '';
        for (const entry of chatHistory) {
            const messageWrapper = createChatWrapper(entry.role, entry.content);
            chatBox.appendChild(messageWrapper);
            
            // 检查消息中是否包含图表占位符
            const chartPlaceholders = entry.content.match(/\[图表:(chart-\d+)\]/g);
            if (chartPlaceholders) {
                for (const placeholder of chartPlaceholders) {
                    const chartId = placeholder.match(/chart-\d+/)[0];
                    const chartData = localStorage.getItem(chartId);
                    if (chartData) {
                        const functionCall = JSON.parse(chartData);
                        await createAndRenderChart(chartId, functionCall, messageWrapper.firstChild);
                    }
                }
            }
        }
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    async function drawChart(container, chartType, data) {
        console.log("drawChart function called");
        console.log("Container:", container);
        console.log("Chart type:", chartType);
        console.log("Data:", JSON.stringify(data, null, 2));

        // 等待 D3 加载完成
        const d3 = await d3Promise;

        // 获取容器的实际宽度
        const containerWidth = container.clientWidth;
        const containerHeight = container.clientHeight;

        // 清空容器
        d3.select(container).selectAll("*").remove();

        const margin = {top: 30, right: 30, bottom: 50, left: 60};
        const width = containerWidth - margin.left - margin.right;
        const height = containerHeight - margin.top - margin.bottom;

        console.log("Chart dimensions:", width, height);

        const svg = d3.select(container)
            .append("svg")
            .attr("width", containerWidth)
            .attr("height", containerHeight)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        console.log("SVG created");

        // 创建比例尺
        const x = d3.scaleBand()
            .range([0, width])
            .padding(0.1);
        const y = d3.scaleLinear()
            .range([height, 0]);

        x.domain(data.map(d => d.label));
        
        // 修改这里：确保 y 轴的域包括 0
        const yMin = Math.min(0, d3.min(data, d => d.value));
        const yMax = d3.max(data, d => d.value);
        y.domain([yMin, yMax]).nice();

        // 添加x轴
        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "rotate(-45)")
            .style("text-anchor", "end");

        // 添加y轴
        svg.append("g")
            .call(d3.axisLeft(y));

        // 添加工具提示
        const tooltip = d3.select(container).append("div")
            .attr("class", "tooltip")
            .style("opacity", 0)
            .style("position", "absolute")
            .style("background-color", "white")
            .style("border", "1px solid #ddd")
            .style("padding", "10px")
            .style("border-radius", "5px");

        // 根据图表类型绘制
        if (chartType === "bar") {
            // 绘制柱状图
            svg.selectAll(".bar")
                .data(data)
                .enter().append("rect")
                .attr("class", "bar")
                .attr("x", d => x(d.label))
                .attr("width", x.bandwidth())
                .attr("y", d => y(Math.max(0, d.value)))
                .attr("height", d => Math.abs(y(d.value) - y(0)))
                .attr("fill", d => d.value >= 0 ? "steelblue" : "red")
                .on("mouseover", function(event, d) {
                    d3.select(this).attr("fill", "orange");
                    tooltip.transition()
                        .duration(200)
                        .style("opacity", .9);
                    tooltip.html(`<strong>${d.label}</strong><br/>值: ${d.value.toLocaleString()}`)
                        .style("left", (event.pageX - container.getBoundingClientRect().left + 10) + "px")
                        .style("top", (event.pageY - container.getBoundingClientRect().top - 28) + "px");
                })
                .on("mouseout", function(d) {
                    d3.select(this).attr("fill", d => d.value >= 0 ? "steelblue" : "red");
                    tooltip.transition()
                        .duration(500)
                        .style("opacity", 0);
                });
        } else if (chartType === "line") {
            // 绘制折线图
            const line = d3.line()
                .x(d => x(d.label) + x.bandwidth() / 2)
                .y(d => y(d.value));

            svg.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "steelblue")
                .attr("stroke-width", 1.5)
                .attr("d", line);

            svg.selectAll(".dot")
                .data(data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("cx", d => x(d.label) + x.bandwidth() / 2)
                .attr("cy", d => y(d.value))
                .attr("r", 5)
                .attr("fill", "steelblue")
                .on("mouseover", function(event, d) {
                    d3.select(this).attr("r", 8).attr("fill", "orange");
                    tooltip.transition()
                        .duration(200)
                        .style("opacity", .9);
                    tooltip.html(`<strong>${d.label}</strong><br/>值: ${d.value.toLocaleString()}`)
                        .style("left", (event.pageX - container.getBoundingClientRect().left + 10) + "px")
                        .style("top", (event.pageY - container.getBoundingClientRect().top - 28) + "px");
                })
                .on("mouseout", function(d) {
                    d3.select(this).attr("r", 5).attr("fill", "steelblue");
                    tooltip.transition()
                        .duration(500)
                        .style("opacity", 0);
                });
        }

        console.log("Chart drawing completed");
    }

    function saveChatHistory(role, content) {
        const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
        chatHistory.push({ role, content });
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    }

    function clearChatHistory() {
        localStorage.removeItem('chatHistory');
        localStorage.removeItem('savedRecords');
        document.getElementById('chat-box').innerHTML = '';
        document.getElementById('saved-records').innerHTML = '';
    }

    function createChatBubble(role, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-bubble ${role === 'user' ? 'user-bubble' : 'assistant-bubble'}`;
        messageDiv.innerHTML = marked.parse(content);
        return messageDiv;
    }

    function createChatWrapper(role, content) {
        const wrapperDiv = document.createElement('div');
        wrapperDiv.className = `message-wrapper ${role === 'user' ? 'user-wrapper' : 'assistant-wrapper'}`;
        const messageDiv = createChatBubble(role, content);
        wrapperDiv.appendChild(messageDiv);
        return wrapperDiv;
    }

    async function sendMessage() {
        const apiKey = document.getElementById('api-key-input').value;
        const messageInput = document.getElementById('message-input');
        const message = messageInput.value.trim();
        const chatBox = document.getElementById('chat-box');

        if (!apiKey) {
            alert("Please enter your API key.");
            return;
        }

        if (!message) {
            alert("Please enter a message.");
            return;
        }

        const userMessageWrapper = createChatWrapper('user', message);
        chatBox.appendChild(userMessageWrapper);
        chatBox.scrollTop = chatBox.scrollHeight;
        saveChatHistory('user', message);
        messageInput.value = '';

        // 获取整个对话历史
        const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
        const messages = [
            { role: "system", content: "你是 Kimi，由 Moonshot AI 提供的人工智能助手，你更擅长中文和英文的对话。你会为用户提供安全，有帮助，准确的回答。同时，你会拒绝一切涉及恐怖主义，种族歧视，黄色暴力等问题的回答。Moonshot AI 为专有名词，不可翻译成其他语言。" },
            ...chatHistory,
            { role: "user", content: message }
        ];

        const requestBody = {
            model: "moonshot-v1-8k",
            messages: messages,
            tools: [{
                type: "function",
                function: {
                    name: "drawChart",
                    description: "使用D3.js绘制图表",
                    parameters: {
                        type: "object",
                        properties: {
                            chartType: {
                                type: "string",
                                enum: ["bar", "line", "pie"],
                                description: "图表类型"
                            },
                            data: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        label: { type: "string" },
                                        value: { type: "number" }
                                    }
                                },
                                description: "图表数据"
                            }
                        },
                        required: ["chartType", "data"]
                    }
                }
            }],
            stream: true
        };

        console.log("Sending request:", JSON.stringify(requestBody, null, 2));

        try {
            const response = await fetch('https://api.moonshot.cn/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder('utf-8');
            let result = '';
            let functionCallReceived = false;
            let functionCallArguments = '';

            const assistantMessageWrapper = createChatWrapper('assistant', '');
            chatBox.appendChild(assistantMessageWrapper);

            const processStream = async () => {
                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;
                    const chunk = decoder.decode(value, { stream: true });

                    console.log("Received chunk:", chunk);

                    const lines = chunk.split('\n').filter(line => line.trim().startsWith('data: '));
                    for (const line of lines) {
                        const jsonStr = line.replace(/^data: /, '');
                        if (jsonStr.trim() === '[DONE]') continue;
                        const parsedData = JSON.parse(jsonStr);
                        if (parsedData.choices[0].delta.tool_calls) {
                            functionCallReceived = true;
                            const toolCall = parsedData.choices[0].delta.tool_calls[0];
                            if (toolCall.function && toolCall.function.arguments) {
                                functionCallArguments += toolCall.function.arguments;
                            }
                        } else if (parsedData.choices[0].delta.content) {
                            result += parsedData.choices[0].delta.content;
                            assistantMessageWrapper.firstChild.innerHTML = marked.parse(result);
                        }
                        chatBox.scrollTop = chatBox.scrollHeight;
                    }
                }
                if (functionCallReceived) {
                    console.log("Complete function call arguments:", functionCallArguments);
                    try {
                        let functionCall = JSON.parse(functionCallArguments);
                        console.log("Parsed function call:", functionCall);
                        if (functionCall.chartType && functionCall.data) {
                            const chartId = `chart-${Date.now()}`;
                            localStorage.setItem(chartId, JSON.stringify(functionCall));

                            // 在消息中添加图表占位符
                            result += `\n[图表:${chartId}]`;
                            assistantMessageWrapper.firstChild.innerHTML = marked.parse(result);

                            // 立即创建并渲染图表
                            await createAndRenderChart(chartId, functionCall, assistantMessageWrapper.firstChild);
                        }

                        if (!result.trim()) {
                            result = "图表数据已保存。";
                            assistantMessageWrapper.firstChild.innerHTML = marked.parse(result);
                        }
                    } catch (error) {
                        console.error("Error parsing function call arguments:", error);
                        console.log("Raw function call arguments:", functionCallArguments);
                        result += "\n解析图表数据时出错。";
                        assistantMessageWrapper.firstChild.innerHTML = marked.parse(result);
                    }
                }
                saveChatHistory('assistant', result);
            };

            await processStream();
            console.log("Final result:", result);

        } catch (error) {
            console.error('Error:', error);
            const errorMessage = `发生错误: ${error.message}。请检查您的网络连接和API密钥，然后重试。`;
            const errorWrapper = createChatWrapper('assistant', errorMessage);
            chatBox.appendChild(errorWrapper);
            chatBox.scrollTop = chatBox.scrollHeight;
            saveChatHistory('assistant', errorMessage);
        }
    }

    async function createAndRenderChart(chartId, functionCall, container) {
        const chartWrapper = document.createElement('div');
        chartWrapper.style.position = 'relative';
        chartWrapper.style.width = '100%';
        chartWrapper.style.minHeight = '400px';
        chartWrapper.style.resize = 'both';
        chartWrapper.style.overflow = 'auto';
        chartWrapper.style.marginTop = '10px';
        chartWrapper.style.marginBottom = '10px';
        chartWrapper.style.border = '1px solid #ccc';

        const chartDiv = document.createElement('div');
        chartDiv.id = chartId;
        chartDiv.style.width = '100%';
        chartDiv.style.height = '100%';

        chartWrapper.appendChild(chartDiv);
        container.appendChild(chartWrapper);

        // 立即绘制图表
        await drawChart(chartDiv, functionCall.chartType, functionCall.data);

        // 使用 ResizeObserver 来监听容器尺寸变化
        const resizeObserver = new ResizeObserver(entries => {
            for (let entry of entries) {
                drawChart(chartDiv, functionCall.chartType, functionCall.data);
            }
        });

        resizeObserver.observe(chartWrapper);
    }

    function saveCurrentRecord() {
        const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
        if (chatHistory.length === 0) {
            alert("No conversation to save.");
            return;
        }

        const savedRecords = JSON.parse(localStorage.getItem('savedRecords')) || [];
        const recordId = `record-${Date.now()}`;
        savedRecords.push({ id: recordId, history: chatHistory });
        localStorage.setItem('savedRecords', JSON.stringify(savedRecords));

        renderSavedRecords();
    }

    function renderSavedRecords() {
        const savedRecords = JSON.parse(localStorage.getItem('savedRecords')) || [];
        const savedRecordsContainer = document.getElementById('saved-records');
        savedRecordsContainer.innerHTML = '';

        savedRecords.forEach(record => {
            const recordDiv = document.createElement('div');
            recordDiv.className = 'flex justify-between items-center p-2 border rounded bg-gray-200';
            const date = new Date(parseInt(record.id.replace('record-', '')));
            recordDiv.innerHTML = `
                <span>Record ${date.toLocaleString()}</span>
                <div class="flex space-x-2">
                    <button data-action="load" data-id="${record.id}" class="bg-blue-500 text-white p-1 rounded hover:bg-blue-700">Load</button>
                    <button data-action="delete" data-id="${record.id}" class="bg-red-500 text-white p-1 rounded hover:bg-red-700">×</button>
                </div>
            `;
            savedRecordsContainer.appendChild(recordDiv);
        });

        // 使用事件委托处理按钮点击
        savedRecordsContainer.addEventListener('click', function(e) {
            if (e.target.tagName === 'BUTTON') {
                const action = e.target.getAttribute('data-action');
                const id = e.target.getAttribute('data-id');
                if (action === 'load') {
                    loadRecord(id);
                } else if (action === 'delete') {
                    deleteRecord(id);
                }
            }
        });
    }

    function loadRecord(recordId) {
        const savedRecords = JSON.parse(localStorage.getItem('savedRecords')) || [];
        const record = savedRecords.find(r => r.id === recordId);

        if (record) {
            localStorage.setItem('chatHistory', JSON.stringify(record.history));
            loadChatHistory(); // 加载聊天历史到UI
        } else {
            alert("未找到记录。");
        }
    }

    function deleteRecord(recordId) {
        let savedRecords = JSON.parse(localStorage.getItem('savedRecords')) || [];
        savedRecords = savedRecords.filter(r => r.id !== recordId);
        localStorage.setItem('savedRecords', JSON.stringify(savedRecords));
        renderSavedRecords();
    }

    function createNewChat() {
        localStorage.removeItem('chatHistory');
        document.getElementById('chat-box').innerHTML = '';
        document.getElementById('message-input').value = '';
    }
</script>