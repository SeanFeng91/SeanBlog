---
import IndexLayout from '../../layouts/IndexLayout.astro';
import { Icon } from 'astro-icon/components';

const allPosts = await Astro.glob('../**/*.{md,mdx}');
const postsByFolder = allPosts.reduce((acc, post) => {
  const folderPath = post.file.split('/').slice(-2, -1)[0];
  if (!acc[folderPath]) {
    acc[folderPath] = [];
  }
  acc[folderPath].push(post);
  return acc;
}, {});

const folderNames = {
  'blogs': '大模型学习博客文章',
  'posts': '个人网页项目博客文章',
  'Tools': '工具类博客文章',

  // 添加更多文件夹映射...
};

const tags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
const folders = Object.keys(postsByFolder);
const allFilters = ['all', ...folders, ...tags];

const pageTitle = "文章分类与标签索引";

// 修改generateTOC函数，包含标签信息
function generateTOC(posts) {
  return posts.map(post => ({
    title: post.frontmatter.title,
    url: post.url,
    tags: post.frontmatter.tags
  }));
}
---

<IndexLayout pageTitle={pageTitle}>
  <div slot="maindiv" class="min-h-screen ">
    <div class="container max-w-6xl px-4 mx-auto py-8">
      <h1 class="text-6xl font-bold text-center mb-4">
        <span class="bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400">
          博客汇总
        </span>
      </h1>
      
      <div class="bg-white dark:bg-gray-800 rounded-xl p-2 mb-8">
        <!-- <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">筛选选项</h2> -->
        <div id="filters" class="flex flex-wrap justify-center gap-2">
          <button class="filter bg-gradient-to-r from-blue-200 to-purple-200 hover:from-blue-300 hover:to-purple-300 text-gray-800 font-medium text-sm py-1.5 px-4 rounded-full transition duration-300 shadow-sm" data-filter="all">
            <Icon name="mdi:filter-variant" class="w-4 h-4 inline-block mr-1" />全部
          </button>
          {folders.map(folder => (
            <button class="filter bg-gradient-to-r from-green-200 to-blue-200 hover:from-green-300 hover:to-blue-300 text-gray-800 font-medium text-sm py-1.5 px-4 rounded-full transition duration-300 shadow-sm" data-filter={folder}>
              <Icon name="mdi:folder" class="w-4 h-4 inline-block mr-1" />{folderNames[folder] || folder}
            </button>
          ))}
          {tags.map(tag => (
            <button class="filter bg-gradient-to-r from-yellow-200 to-orange-200 hover:from-yellow-300 hover:to-orange-300 text-gray-800 font-medium text-sm py-1.5 px-4 rounded-full transition duration-300 shadow-sm" data-filter={tag}>
              <Icon name="mdi:tag" class="w-4 h-4 inline-block mr-1" />{tag}
            </button>
          ))}
        </div>
      </div>
      
      {Object.entries(postsByFolder).map(([folder, posts]) => (
        <div class="mb-6 bg-white dark:bg-gray-800 rounded-2xl shadow-md p-8">
          <h2 class="text-3xl font-bold mb-6 mt-6 text-gray-800 dark:text-white border-b pb-2">{folderNames[folder] || folder}</h2>
          <div class="flex flex-col md:flex-row">
            <!-- 左侧目录树 -->
            <div class="w-full md:w-1/5 pr-4 mb-4 md:mb-0">
              <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-gray-300">版块文章</h3>
              <ul class="space-y-1 toc-list">
                {generateTOC(posts).map((item) => (
                  <li class="toc-item" data-tags={item.tags.join(',')}>
                    <a href={item.url} class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition duration-300">{item.title}</a>
                  </li>
                ))}
              </ul>
            </div>
            <!-- 右侧文章卡片 -->
            <div class="w-full md:w-4/5">
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {posts.map((post, index) => (
                  <div class="post" data-folder={folder} data-tags={post.frontmatter.tags.join(',')}>
                    <div data-aos="fade-up" data-aos-offset="100" data-aos-delay={index * 100} data-aos-duration="800" 
                         class="bg-gray-50 dark:bg-gray-700 rounded-xl shadow-md overflow-hidden h-full flex flex-col transform transition duration-300 hover:scale-105 hover:shadow-lg">
                      <div class="px-6 py-4 flex-grow">
                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2">{folderNames[folder] || folder} #{index + 1}</p>
                        <h3 class="text-xl mt-2 font-bold mb-3 text-gray-800 dark:text-white line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400 transition duration-300">
                          <a href={post.url} class="no-underline">{post.frontmatter.title}</a>
                        </h3>
                        <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-3">
                          {post.frontmatter.description}
                        </p>
                      </div>
                      <div class="px-6 py-4 bg-gray-100 dark:bg-gray-600">
                        <div class="flex flex-wrap gap-2">
                          {post.frontmatter.tags.map((tag) => (
                            <span class="inline-block bg-white dark:bg-gray-700 rounded-full px-3 py-1 text-xs font-semibold text-gray-700 dark:text-gray-200">
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</IndexLayout>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@400;500;700&display=swap');

  body {
    font-family: 'Noto Sans SC', sans-serif;
  }

  .filter.selected {
    @apply bg-blue-500 text-white;
  }

  .filter {
    transition: all 0.3s ease;
  }

  .filter:hover {
    transform: translateY(-2px);
  }

  /* 添加背景装饰 */
  .container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    opacity: 0.5;
    z-index: -1;
  }

  .toc-list {
    font-family: 'Noto Sans SC', sans-serif;
    font-size: 0.875rem;
    line-height: 1.5;
    padding-left: 0rem;
  }

  .toc-item {
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
  }

  .toc-item a {
    text-decoration: none;
    position: relative;
    padding-left: 1rem;
  }

  .toc-item a::before {
    content: '•';
    position: absolute;
    left: 0;
    color: #4B5563;
  }

  .toc-item a:hover::before {
    color: #3B82F6;
  }
</style>

<script is:inline src="https://unpkg.com/aos@next/dist/aos.js"></script>
<script is:inline> 
  AOS.init({
    once: true,
    disable: 'phone'
  });
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const filters = document.querySelectorAll('.filter');
    const posts = document.querySelectorAll('.post');
    let selectedFolders = new Set();
    let selectedTags = new Set();

    function filterPosts() {
      posts.forEach(post => {
        const postFolder = post.getAttribute('data-folder');
        const postTags = post.getAttribute('data-tags').split(',');
        
        const folderMatch = selectedFolders.size === 0 || selectedFolders.has(postFolder);
        const tagMatch = selectedTags.size === 0 || postTags.some(tag => selectedTags.has(tag));
        
        post.style.display = folderMatch && tagMatch ? 'block' : 'none';
      });

      // 更新目录项的显示
      document.querySelectorAll('.toc-item').forEach(item => {
        const itemTags = item.getAttribute('data-tags').split(',');
        const tagMatch = selectedTags.size === 0 || itemTags.some(tag => selectedTags.has(tag));
        item.style.display = tagMatch ? 'block' : 'none';
      });

      AOS.refresh();
    }

    function handleFilterClick(event) {
      const clickedFilter = event.currentTarget;
      const filterName = clickedFilter.getAttribute('data-filter');
      const isFolder = clickedFilter.classList.contains('from-green-200');

      if (filterName === 'all') {
        selectedFolders.clear();
        selectedTags.clear();
        filters.forEach(filter => filter.classList.remove('selected'));
        clickedFilter.classList.add('selected');
      } else {
        document.querySelector('.filter[data-filter="all"]').classList.remove('selected');
        clickedFilter.classList.toggle('selected');

        if (isFolder) {
          if (clickedFilter.classList.contains('selected')) {
            selectedFolders.add(filterName);
          } else {
            selectedFolders.delete(filterName);
          }
        } else {
          if (clickedFilter.classList.contains('selected')) {
            selectedTags.add(filterName);
          } else {
            selectedTags.delete(filterName);
          }
        }

        if (selectedFolders.size === 0 && selectedTags.size === 0) {
          document.querySelector('.filter[data-filter="all"]').classList.add('selected');
        }
      }
      
      filterPosts();
    }

    filters.forEach(filter => {
      filter.addEventListener('click', handleFilterClick);
    });

    filterPosts();
  });
</script>