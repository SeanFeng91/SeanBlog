---
import IndexLayout from '../../layouts/IndexLayout.astro';
const allPosts = await Astro.glob('../**/*.{md,mdx}');
const tags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

const pageTitle = "Tag Index";
// 这是tag首页，用来blog导航
---
<IndexLayout pageTitle={pageTitle}>
    <div slot="maindiv" >
      <div class="text-5xl font-extrabold ...">
        <span class="bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-violet-500">
          Hello world!
          尝试用tags记录博客分类
        </span>
        <p class="text-sm">（标题用了bg-clip-text，文字扣背景颜色）</p>
      </div>
      
      <div id="tags" class="flex">
        <div class="tag bg-red-50" data-tag="all">All</div>
        {tags.map(tag => (
          <div class="tag bg-red-50" data-tag={tag}>{tag}</div>
        ))}
      </div>
      
      <div id="posts" class="mt-10 grid lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-y-10 gap-x-5 dark:text-cyan-50">
        {allPosts.map((indexcard, index) =>
          <div class="post" data-tags={indexcard.frontmatter.tags.join(',')}>
            <div class="min-w-sm border dark:border-sky-800 rounded-lg p-4 min-h-60 bg-gradient-to-t from-sky-50 to-sky-0 dark:from-sky-950 dark:to-sky-900 shadow-sm">
              <h4 class="mt-1 mb-0 font-bold light text-gray-400 dark:text-slate-200">Blog No.{index + 1}</h4>
              <h2 class="nav-links mt-1 text-2xl text-balance leading-tight font-bold hover:text-blue-900">
                <a href={indexcard.url}>{indexcard.frontmatter.title}</a>
              </h2>
              <p class="text-sm italic tracking-normal text-pretty indent-8 leading-relaxed dark:text-slate-200">
                {indexcard.frontmatter.description}
              </p>
            </div>
            <div>
              <p class="p-0 mt-2 mb-0 ml-2 font-bold text-slate-400">文档分类：</p>
              {indexcard.frontmatter.tags.map((blogtags) => (
                <div class="inline-block mt-1">
                  <p class="m-0 text-lg font-light">
                    <svg class="inline-block" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16">
                      <path fill="currentColor" d="M9.737.854L3.69 8l6.047 7.146l1.526-1.292L6.31 8l4.953-5.854z" />
                    </svg>
                    {blogtags}
                    <svg class="inline-block" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16">
                      <path fill="currentColor" d="M6.263 15.146L12.31 8L6.263.854L4.737 2.146L9.69 8l-4.953 5.854z" />
                    </svg>
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
</IndexLayout>

<style>
  .tags a {
    color: #000000;
    text-decoration-line: none;
    font-family: sans-serif;
    font-weight: 300;
    letter-spacing: 0.025em;
    font-size: 1.0rem; /* 18px */
    line-height: 1.75rem; /* 28px */
}



.tags {
    display: flex;
    flex-wrap: wrap;
}

.tag {
    margin: 0.25em;
    border: solid #000000;
    border-radius: 9999px;
    padding-left: 20px;
    padding-right: 20px;
    font-size: 1.15em;
    /* background-color: transparent; */
    border-width: 2px;
    cursor: pointer;
    -webkit-tap-highlight-color: transparent; /* 确保在触摸设备上没有点击高亮效果 */
}

.tag.selected {
    background-color: #000000;
    color: #ffffff;
}

</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
  const tags = document.querySelectorAll('.tag');
  const posts = document.querySelectorAll('.post');
  let selectedTags = new Set(); // 初始化时不选择任何标签

  function filterPosts() {
    if (selectedTags.size === 0 || selectedTags.has('all')) {
      posts.forEach(post => post.style.display = 'block');
    } else {
      posts.forEach(post => {
        const postTags = post.getAttribute('data-tags').split(',');
        const hasAllSelectedTags = Array.from(selectedTags).every(selectedTag => postTags.includes(selectedTag));
        post.style.display = hasAllSelectedTags ? 'block' : 'none';
      });
    }
  }

  function handleTagClick(event) {
    const clickedTag = event.currentTarget;
    const tagName = clickedTag.getAttribute('data-tag');

    if (tagName === 'all') {
      if (selectedTags.has('all')) {
        selectedTags.delete('all');
        clickedTag.classList.remove('selected');
      } else {
        selectedTags.clear();
        selectedTags.add('all');
        tags.forEach(tag => tag.classList.remove('selected'));
        clickedTag.classList.add('selected');
      }
    } else {
      if (selectedTags.has(tagName)) {
        selectedTags.delete(tagName);
        clickedTag.classList.remove('selected');
      } else {
        selectedTags.add(tagName);
        clickedTag.classList.add('selected');
        document.querySelector('.tag[data-tag="all"]').classList.remove('selected');
        selectedTags.delete('all');
      }
    }
    filterPosts();
  }

  tags.forEach(tag => {
    tag.addEventListener('click', handleTagClick);
    tag.addEventListener('touchstart', handleTagClick);
  });

  // 默认显示所有博客并选中 'All' 标签
  const allTag = document.querySelector('.tag[data-tag="all"]');
  allTag.classList.add('selected');
  selectedTags.add('all');
  filterPosts();
});

</script>