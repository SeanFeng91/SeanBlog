---
// import { useState } from 'react';
// import { h } from 'preact';
import "../styles/global.css";
import IndexLayout from "../layouts/IndexLayout.astro";
// import { getMoonshotApiKey } from './api/api.js';
import { marked } from 'marked';

---
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<IndexLayout>
  <div slot="maindiv">

    <div class="max-w-2xl mx-auto bg-white p-6 rounded-lg shadow-lg">
        <h1 class="text-2xl font-bold mb-4">一个非常简易的基于Kimi API的流式问答页面</h1>
        <div class="mb-4">
            <input type="text" id="api-key-input" placeholder="Enter your Kimi API Key" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <div class="mb-4">
            <input type="text" id="message-input" placeholder="Enter your message" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <button id="send-button" class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Ask Kimi</button>
        <button id="clear-history-button" class="w-full bg-red-500 text-white p-2 rounded hover:bg-red-700 mt-2">Clear History</button>
        <div id="chat-box" class="mt-4 p-4 border border-gray-300 rounded bg-gray-50 max-h-96 overflow-y-auto"></div>
    </div>
</IndexLayout>
    


    <script>
        import { marked } from 'marked';

        
        document.addEventListener('DOMContentLoaded', () => {
            loadChatHistory();

            document.getElementById('send-button').addEventListener('click', sendMessage);
            document.getElementById('clear-history-button').addEventListener('click', clearChatHistory);
        });

        function loadChatHistory() {
            const chatBox = document.getElementById('chat-box');
            const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
            chatBox.innerHTML = '';
            chatHistory.forEach(entry => {
                const messageDiv = document.createElement('div');
                messageDiv.className = entry.role === 'user' ? 'text-right text-blue-600 my-2' : 'text-left text-green-600 my-2';
                messageDiv.innerHTML = marked(entry.content); // 使用 marked 解析并渲染 Markdown
                chatBox.appendChild(messageDiv);
            });
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function saveChatHistory(role, content) {
            const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
            chatHistory.push({ role, content });
            localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        }

        function clearChatHistory() {
            localStorage.removeItem('chatHistory');
            document.getElementById('chat-box').innerHTML = '';
        }

        async function sendMessage() {
            const apiKey = document.getElementById('api-key-input').value;
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();
            const chatBox = document.getElementById('chat-box');

            if (!apiKey) {
                alert("Please enter your API key.");
                return;
            }

            if (!message) {
                alert("Please enter a message.");
                return;
            }

            // 用户消息显示
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'text-right text-blue-600 my-2';
            userMessageDiv.textContent = message;
            chatBox.appendChild(userMessageDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
            saveChatHistory('user', message); // 保存用户消息
            messageInput.value = '';

            const requestBody = {
                model: "moonshot-v1-8k",
                messages: [
                    { role: "system", content: "你是 Kimi，由 Moonshot AI 提供的人工智能助手，你更擅长中文和英文的对话。你会为用户提供安全，有帮助，准确的回答。同时，你会拒绝一切涉及恐怖主义，种族歧视，黄色暴力等问题的回答。Moonshot AI 为专有名词，不可翻译成其他语言。" },
                    { role: "user", content: message }
                ],
                stream: true
            };

            try {
                const response = await fetch('https://api.moonshot.cn/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify(requestBody)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const reader = response.body.getReader();
                const decoder = new TextDecoder('utf-8');
                let result = '';

                const assistantMessageDiv = document.createElement('div');
                assistantMessageDiv.className = 'text-left text-green-600 my-2';
                chatBox.appendChild(assistantMessageDiv);

                const processStream = async () => {
                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        const chunk = decoder.decode(value, { stream: true });
                        // 解析并提取有用内容
                        const lines = chunk.split('\n').filter(line => line.trim().startsWith('data: '));
                        for (const line of lines) {
                            const jsonStr = line.replace(/^data: /, '');
                            if (jsonStr.trim() === '[DONE]') continue;
                            const parsedData = JSON.parse(jsonStr);
                            const content = parsedData.choices[0].delta.content;
                            if (content) {
                                result += content;
                                assistantMessageDiv.innerHTML = marked(result); // 解析并渲染Markdown
                                chatBox.scrollTop = chatBox.scrollHeight;  // 保持滚动到底部
                            }
                        }
                    }
                    saveChatHistory('assistant', result); // 保存助手消息
                };

                processStream().catch(error => {
                    console.error('Error processing stream:', error);
                });

            } catch (error) {
                chatBox.textContent = `Fetch error: ${error.message}`;
            }
        }
    </script>
   